{"ast":null,"code":"import * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ViewEncapsulation, Input, Output, ViewChild, ContentChildren, Directive, HostListener, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i1 from 'primeng/api';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport * as i3 from 'primeng/paginator';\nimport { PaginatorModule } from 'primeng/paginator';\nimport * as i5 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport * as i4 from 'primeng/scroller';\nimport { ScrollerModule } from 'primeng/scroller';\nimport { ObjectUtils } from 'primeng/utils';\nimport { Subject } from 'rxjs';\nconst _c0 = [\"container\"];\nconst _c1 = [\"resizeHelper\"];\nconst _c2 = [\"reorderIndicatorUp\"];\nconst _c3 = [\"reorderIndicatorDown\"];\nconst _c4 = [\"table\"];\nconst _c5 = [\"scrollableView\"];\nconst _c6 = [\"scrollableFrozenView\"];\nfunction TreeTable_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"div\", 13);\n    i0.ɵɵelement(2, \"i\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassMap(\"p-treetable-loading-icon pi-spin \" + ctx_r1.loadingIcon);\n  }\n}\nfunction TreeTable_div_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, TreeTable_div_3_ng_container_1_Template, 1, 0, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.captionTemplate);\n  }\n}\nfunction TreeTable_p_paginator_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-paginator\", 16);\n    i0.ɵɵlistener(\"onPageChange\", function TreeTable_p_paginator_4_Template_p_paginator_onPageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onPageChange($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rows\", ctx_r3.rows)(\"first\", ctx_r3.first)(\"totalRecords\", ctx_r3.totalRecords)(\"pageLinkSize\", ctx_r3.pageLinks)(\"alwaysShow\", ctx_r3.alwaysShowPaginator)(\"rowsPerPageOptions\", ctx_r3.rowsPerPageOptions)(\"templateLeft\", ctx_r3.paginatorLeftTemplate)(\"templateRight\", ctx_r3.paginatorRightTemplate)(\"dropdownAppendTo\", ctx_r3.paginatorDropdownAppendTo)(\"currentPageReportTemplate\", ctx_r3.currentPageReportTemplate)(\"showFirstLastIcon\", ctx_r3.showFirstLastIcon)(\"dropdownItemTemplate\", ctx_r3.paginatorDropdownItemTemplate)(\"showCurrentPageReport\", ctx_r3.showCurrentPageReport)(\"showJumpToPageDropdown\", ctx_r3.showJumpToPageDropdown)(\"showPageLinks\", ctx_r3.showPageLinks);\n  }\n}\nfunction TreeTable_div_5_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_div_5_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_div_5_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c7 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\nfunction TreeTable_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"table\", 18, 19);\n    i0.ɵɵtemplate(3, TreeTable_div_5_ng_container_3_Template, 1, 0, \"ng-container\", 20);\n    i0.ɵɵelementStart(4, \"thead\", 21);\n    i0.ɵɵtemplate(5, TreeTable_div_5_ng_container_5_Template, 1, 0, \"ng-container\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"tbody\", 22);\n    i0.ɵɵelementStart(7, \"tfoot\", 23);\n    i0.ɵɵtemplate(8, TreeTable_div_5_ng_container_8_Template, 1, 0, \"ng-container\", 20);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.tableStyleClass)(\"ngStyle\", ctx_r4.tableStyle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(10, _c7, ctx_r4.columns));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.headerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(12, _c7, ctx_r4.columns));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"pTreeTableBody\", ctx_r4.columns)(\"pTreeTableBodyTemplate\", ctx_r4.bodyTemplate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.footerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(14, _c7, ctx_r4.columns));\n  }\n}\nconst _c8 = function (a0) {\n  return {\n    width: a0\n  };\n};\nfunction TreeTable_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 28, 29);\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ttScrollableView\", ctx_r18.frozenColumns)(\"frozen\", true)(\"ngStyle\", i0.ɵɵpureFunction1(4, _c8, ctx_r18.frozenWidth))(\"scrollHeight\", ctx_r18.scrollHeight);\n  }\n}\nconst _c9 = function (a0, a1) {\n  return {\n    left: a0,\n    width: a1\n  };\n};\nfunction TreeTable_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵtemplate(1, TreeTable_div_6_div_1_Template, 2, 6, \"div\", 25);\n    i0.ɵɵelement(2, \"div\", 26, 27);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.frozenColumns || ctx_r5.frozenBodyTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ttScrollableView\", ctx_r5.columns)(\"frozen\", false)(\"scrollHeight\", ctx_r5.scrollHeight)(\"ngStyle\", i0.ɵɵpureFunction2(5, _c9, ctx_r5.frozenWidth, \"calc(100% - \" + ctx_r5.frozenWidth + \")\"));\n  }\n}\nfunction TreeTable_p_paginator_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-paginator\", 30);\n    i0.ɵɵlistener(\"onPageChange\", function TreeTable_p_paginator_7_Template_p_paginator_onPageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.onPageChange($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rows\", ctx_r6.rows)(\"first\", ctx_r6.first)(\"totalRecords\", ctx_r6.totalRecords)(\"pageLinkSize\", ctx_r6.pageLinks)(\"alwaysShow\", ctx_r6.alwaysShowPaginator)(\"rowsPerPageOptions\", ctx_r6.rowsPerPageOptions)(\"templateLeft\", ctx_r6.paginatorLeftTemplate)(\"templateRight\", ctx_r6.paginatorRightTemplate)(\"dropdownAppendTo\", ctx_r6.paginatorDropdownAppendTo)(\"currentPageReportTemplate\", ctx_r6.currentPageReportTemplate)(\"showFirstLastIcon\", ctx_r6.showFirstLastIcon)(\"dropdownItemTemplate\", ctx_r6.paginatorDropdownItemTemplate)(\"showCurrentPageReport\", ctx_r6.showCurrentPageReport)(\"showJumpToPageDropdown\", ctx_r6.showJumpToPageDropdown)(\"showPageLinks\", ctx_r6.showPageLinks);\n  }\n}\nfunction TreeTable_div_8_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31);\n    i0.ɵɵtemplate(1, TreeTable_div_8_ng_container_1_Template, 1, 0, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.summaryTemplate);\n  }\n}\nfunction TreeTable_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 32, 33);\n  }\n}\nfunction TreeTable_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 34, 35);\n  }\n}\nfunction TreeTable_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 36, 37);\n  }\n}\nconst _c10 = function (a1, a2, a3, a4, a5) {\n  return {\n    \"p-treetable p-component\": true,\n    \"p-treetable-hoverable-rows\": a1,\n    \"p-treetable-auto-layout\": a2,\n    \"p-treetable-resizable\": a3,\n    \"p-treetable-resizable-fit\": a4,\n    \"p-treetable-flex-scrollable\": a5\n  };\n};\nconst _c11 = [\"pTreeTableBody\", \"\"];\nfunction TTBody_ng_template_0_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c12 = function (a0, a1, a2, a3) {\n  return {\n    $implicit: a0,\n    node: a1,\n    rowData: a2,\n    columns: a3\n  };\n};\nfunction TTBody_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTBody_ng_template_0_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const serializedNode_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction4(2, _c12, serializedNode_r2, serializedNode_r2.node, serializedNode_r2.node.data, ctx_r4.columns));\n  }\n}\nfunction TTBody_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTBody_ng_template_0_ng_container_0_Template, 2, 7, \"ng-container\", 1);\n  }\n  if (rf & 2) {\n    const serializedNode_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngIf\", serializedNode_r2.visible);\n  }\n}\nfunction TTBody_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c13 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    frozen: a1\n  };\n};\nfunction TTBody_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTBody_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.tt.emptyMessageTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c13, ctx_r1.columns, ctx_r1.frozen));\n  }\n}\nconst _c14 = [\"scrollHeader\"];\nconst _c15 = [\"scrollHeaderBox\"];\nconst _c16 = [\"scrollBody\"];\nconst _c17 = [\"scrollTable\"];\nconst _c18 = [\"loadingTable\"];\nconst _c19 = [\"scrollFooter\"];\nconst _c20 = [\"scrollFooterBox\"];\nconst _c21 = [\"scrollableAligner\"];\nconst _c22 = [\"scroller\"];\nconst _c23 = [\"ttScrollableView\", \"\"];\nfunction TTScrollableView_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_p_scroller_8_ng_template_2_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c24 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    options: a1\n  };\n};\nfunction TTScrollableView_p_scroller_8_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTScrollableView_p_scroller_8_ng_template_2_ng_container_0_Template, 1, 0, \"ng-container\", 5);\n  }\n  if (rf & 2) {\n    const items_r12 = ctx.$implicit;\n    const scrollerOptions_r13 = ctx.options;\n    i0.ɵɵnextContext(2);\n    const _r6 = i0.ɵɵreference(11);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r6)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c24, items_r12, scrollerOptions_r13));\n  }\n}\nfunction TTScrollableView_p_scroller_8_ng_container_3_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c25 = function (a0) {\n  return {\n    options: a0\n  };\n};\nfunction TTScrollableView_p_scroller_8_ng_container_3_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTScrollableView_p_scroller_8_ng_container_3_ng_template_1_ng_container_0_Template, 1, 0, \"ng-container\", 5);\n  }\n  if (rf & 2) {\n    const scrollerOptions_r16 = ctx.options;\n    const ctx_r15 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r15.loaderTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c25, scrollerOptions_r16));\n  }\n}\nfunction TTScrollableView_p_scroller_8_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTScrollableView_p_scroller_8_ng_container_3_ng_template_1_Template, 1, 4, \"ng-template\", 14);\n    i0.ɵɵelementContainerEnd();\n  }\n}\nconst _c26 = function (a0) {\n  return {\n    height: a0\n  };\n};\nfunction TTScrollableView_p_scroller_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-scroller\", 11, 12);\n    i0.ɵɵlistener(\"onLazyLoad\", function TTScrollableView_p_scroller_8_Template_p_scroller_onLazyLoad_0_listener($event) {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.tt.onLazyItemLoad($event));\n    });\n    i0.ɵɵtemplate(2, TTScrollableView_p_scroller_8_ng_template_2_Template, 1, 5, \"ng-template\", 13);\n    i0.ɵɵtemplate(3, TTScrollableView_p_scroller_8_ng_container_3_Template, 2, 0, \"ng-container\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction1(8, _c26, ctx_r4.tt.scrollHeight !== \"flex\" ? ctx_r4.tt.scrollHeight : undefined));\n    i0.ɵɵproperty(\"items\", ctx_r4.tt.serializedValue)(\"scrollHeight\", ctx_r4.scrollHeight !== \"flex\" ? undefined : \"100%\")(\"itemSize\", ctx_r4.tt.virtualScrollItemSize || ctx_r4.tt._virtualRowHeight)(\"lazy\", ctx_r4.tt.lazy)(\"options\", ctx_r4.tt.virtualScrollOptions);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.loaderTemplate);\n  }\n}\nfunction TTScrollableView_ng_container_9_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c27 = function (a0, a1) {\n  return {\n    \"max-height\": a0,\n    \"overflow-y\": a1\n  };\n};\nconst _c28 = function () {\n  return {};\n};\nfunction TTScrollableView_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 15, 16);\n    i0.ɵɵtemplate(3, TTScrollableView_ng_container_9_ng_container_3_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    const _r6 = i0.ɵɵreference(11);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction2(3, _c27, ctx_r5.tt.scrollHeight !== \"flex\" ? ctx_r5.scrollHeight : undefined, !ctx_r5.frozen && ctx_r5.tt.scrollHeight ? \"scroll\" : undefined));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r6)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(7, _c24, ctx_r5.serializedValue, i0.ɵɵpureFunction0(6, _c28)));\n  }\n}\nfunction TTScrollableView_ng_template_10_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_ng_template_10_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 21, 22);\n  }\n}\nfunction TTScrollableView_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 17, 18);\n    i0.ɵɵtemplate(2, TTScrollableView_ng_template_10_ng_container_2_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelement(3, \"tbody\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, TTScrollableView_ng_template_10_div_4_Template, 2, 0, \"div\", 20);\n  }\n  if (rf & 2) {\n    const items_r22 = ctx.$implicit;\n    const scrollerOptions_r23 = ctx.options;\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(scrollerOptions_r23.contentStyle);\n    i0.ɵɵclassMap(ctx_r7.tt.tableStyleClass);\n    i0.ɵɵproperty(\"ngClass\", scrollerOptions_r23.contentStyleClass)(\"ngStyle\", ctx_r7.tt.tableStyle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.frozen ? ctx_r7.tt.frozenColGroupTemplate || ctx_r7.tt.colGroupTemplate : ctx_r7.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(13, _c7, ctx_r7.columns));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"pTreeTableBody\", ctx_r7.columns)(\"pTreeTableBodyTemplate\", ctx_r7.frozen ? ctx_r7.tt.frozenBodyTemplate || ctx_r7.tt.bodyTemplate : ctx_r7.tt.bodyTemplate)(\"serializedNodes\", items_r22)(\"frozen\", ctx_r7.frozen);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.frozen);\n  }\n}\nfunction TTScrollableView_div_12_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_div_12_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23, 24)(2, \"div\", 25, 26)(4, \"table\", 27);\n    i0.ɵɵtemplate(5, TTScrollableView_div_12_ng_container_5_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementStart(6, \"tfoot\", 28);\n    i0.ɵɵtemplate(7, TTScrollableView_div_12_ng_container_7_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", ctx_r8.tt.tableStyleClass)(\"ngStyle\", ctx_r8.tt.tableStyle);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r8.frozen ? ctx_r8.tt.frozenColGroupTemplate || ctx_r8.tt.colGroupTemplate : ctx_r8.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(6, _c7, ctx_r8.columns));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r8.frozen ? ctx_r8.tt.frozenFooterTemplate || ctx_r8.tt.footerTemplate : ctx_r8.tt.footerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(8, _c7, ctx_r8.columns));\n  }\n}\nconst _c29 = function (a0, a1, a2) {\n  return {\n    \"pi-sort-amount-up-alt\": a0,\n    \"pi-sort-amount-down\": a1,\n    \"pi-sort-alt\": a2\n  };\n};\nconst _c30 = function (a0) {\n  return {\n    \"p-checkbox-focused\": a0\n  };\n};\nconst _c31 = function (a1, a2, a3, a4) {\n  return {\n    \"p-checkbox-box\": true,\n    \"p-highlight\": a1,\n    \"p-focus\": a2,\n    \"p-indeterminate\": a3,\n    \"p-disabled\": a4\n  };\n};\nconst _c32 = function (a0, a1) {\n  return {\n    \"pi-check\": a0,\n    \"pi-minus\": a1\n  };\n};\nconst _c33 = [\"box\"];\nconst _c34 = function (a1, a2, a3) {\n  return {\n    \"p-checkbox-box\": true,\n    \"p-highlight\": a1,\n    \"p-focus\": a2,\n    \"p-disabled\": a3\n  };\n};\nconst _c35 = function (a0) {\n  return {\n    \"pi pi-check\": a0\n  };\n};\nfunction TreeTableCellEditor_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTableCellEditor_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.inputTemplate);\n  }\n}\nfunction TreeTableCellEditor_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTableCellEditor_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.outputTemplate);\n  }\n}\nclass TreeTableService {\n  constructor() {\n    this.sortSource = new Subject();\n    this.selectionSource = new Subject();\n    this.contextMenuSource = new Subject();\n    this.uiUpdateSource = new Subject();\n    this.totalRecordsSource = new Subject();\n    this.sortSource$ = this.sortSource.asObservable();\n    this.selectionSource$ = this.selectionSource.asObservable();\n    this.contextMenuSource$ = this.contextMenuSource.asObservable();\n    this.uiUpdateSource$ = this.uiUpdateSource.asObservable();\n    this.totalRecordsSource$ = this.totalRecordsSource.asObservable();\n  }\n  onSort(sortMeta) {\n    this.sortSource.next(sortMeta);\n  }\n  onSelectionChange() {\n    this.selectionSource.next(null);\n  }\n  onContextMenu(node) {\n    this.contextMenuSource.next(node);\n  }\n  onUIUpdate(value) {\n    this.uiUpdateSource.next(value);\n  }\n  onTotalRecordsChange(value) {\n    this.totalRecordsSource.next(value);\n  }\n}\nTreeTableService.ɵfac = function TreeTableService_Factory(t) {\n  return new (t || TreeTableService)();\n};\nTreeTableService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TreeTableService,\n  factory: TreeTableService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableService, [{\n    type: Injectable\n  }], null, null);\n})();\nclass TreeTable {\n  constructor(el, cd, zone, tableService, filterService) {\n    this.el = el;\n    this.cd = cd;\n    this.zone = zone;\n    this.tableService = tableService;\n    this.filterService = filterService;\n    this.lazy = false;\n    this.lazyLoadOnInit = true;\n    this.first = 0;\n    this.pageLinks = 5;\n    this.alwaysShowPaginator = true;\n    this.paginatorPosition = 'bottom';\n    this.currentPageReportTemplate = '{currentPage} of {totalPages}';\n    this.showFirstLastIcon = true;\n    this.showPageLinks = true;\n    this.defaultSortOrder = 1;\n    this.sortMode = 'single';\n    this.resetPageOnSort = true;\n    this.selectionChange = new EventEmitter();\n    this.contextMenuSelectionChange = new EventEmitter();\n    this.contextMenuSelectionMode = 'separate';\n    this.compareSelectionBy = 'deepEquals';\n    this.loadingIcon = 'pi pi-spinner';\n    this.showLoader = true;\n    this.virtualScrollDelay = 150;\n    this.columnResizeMode = 'fit';\n    this.rowTrackBy = (index, item) => item;\n    this.filters = {};\n    this.filterDelay = 300;\n    this.filterMode = 'lenient';\n    this.onFilter = new EventEmitter();\n    this.onNodeExpand = new EventEmitter();\n    this.onNodeCollapse = new EventEmitter();\n    this.onPage = new EventEmitter();\n    this.onSort = new EventEmitter();\n    this.onLazyLoad = new EventEmitter();\n    this.sortFunction = new EventEmitter();\n    this.onColResize = new EventEmitter();\n    this.onColReorder = new EventEmitter();\n    this.onNodeSelect = new EventEmitter();\n    this.onNodeUnselect = new EventEmitter();\n    this.onContextMenuSelect = new EventEmitter();\n    this.onHeaderCheckboxToggle = new EventEmitter();\n    this.onEditInit = new EventEmitter();\n    this.onEditComplete = new EventEmitter();\n    this.onEditCancel = new EventEmitter();\n    /* @deprecated */\n    this._virtualRowHeight = 28;\n    this._value = [];\n    this._totalRecords = 0;\n    this._sortOrder = 1;\n    this.selectionKeys = {};\n  }\n  get virtualRowHeight() {\n    return this._virtualRowHeight;\n  }\n  set virtualRowHeight(val) {\n    this._virtualRowHeight = val;\n    console.warn('The virtualRowHeight property is deprecated, use virtualScrollItemSize property instead.');\n  }\n  ngOnInit() {\n    if (this.lazy && this.lazyLoadOnInit && !this.virtualScroll) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    }\n    this.initialized = true;\n  }\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'caption':\n          this.captionTemplate = item.template;\n          break;\n        case 'header':\n          this.headerTemplate = item.template;\n          break;\n        case 'body':\n          this.bodyTemplate = item.template;\n          break;\n        case 'loadingbody':\n          this.loadingBodyTemplate = item.template;\n          break;\n        case 'footer':\n          this.footerTemplate = item.template;\n          break;\n        case 'summary':\n          this.summaryTemplate = item.template;\n          break;\n        case 'colgroup':\n          this.colGroupTemplate = item.template;\n          break;\n        case 'emptymessage':\n          this.emptyMessageTemplate = item.template;\n          break;\n        case 'paginatorleft':\n          this.paginatorLeftTemplate = item.template;\n          break;\n        case 'paginatorright':\n          this.paginatorRightTemplate = item.template;\n          break;\n        case 'paginatordropdownitem':\n          this.paginatorDropdownItemTemplate = item.template;\n          break;\n        case 'frozenheader':\n          this.frozenHeaderTemplate = item.template;\n          break;\n        case 'frozenbody':\n          this.frozenBodyTemplate = item.template;\n          break;\n        case 'frozenfooter':\n          this.frozenFooterTemplate = item.template;\n          break;\n        case 'frozencolgroup':\n          this.frozenColGroupTemplate = item.template;\n          break;\n      }\n    });\n  }\n  ngOnChanges(simpleChange) {\n    if (simpleChange.value) {\n      this._value = simpleChange.value.currentValue;\n      if (!this.lazy) {\n        this.totalRecords = this._value ? this._value.length : 0;\n        if (this.sortMode == 'single' && this.sortField) this.sortSingle();else if (this.sortMode == 'multiple' && this.multiSortMeta) this.sortMultiple();else if (this.hasFilter())\n          //sort already filters\n          this._filter();\n      }\n      this.updateSerializedValue();\n      this.tableService.onUIUpdate(this.value);\n    }\n    if (simpleChange.sortField) {\n      this._sortField = simpleChange.sortField.currentValue;\n      //avoid triggering lazy load prior to lazy initialization at onInit\n      if (!this.lazy || this.initialized) {\n        if (this.sortMode === 'single') {\n          this.sortSingle();\n        }\n      }\n    }\n    if (simpleChange.sortOrder) {\n      this._sortOrder = simpleChange.sortOrder.currentValue;\n      //avoid triggering lazy load prior to lazy initialization at onInit\n      if (!this.lazy || this.initialized) {\n        if (this.sortMode === 'single') {\n          this.sortSingle();\n        }\n      }\n    }\n    if (simpleChange.multiSortMeta) {\n      this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n      if (this.sortMode === 'multiple') {\n        this.sortMultiple();\n      }\n    }\n    if (simpleChange.selection) {\n      this._selection = simpleChange.selection.currentValue;\n      if (!this.preventSelectionSetterPropagation) {\n        this.updateSelectionKeys();\n        this.tableService.onSelectionChange();\n      }\n      this.preventSelectionSetterPropagation = false;\n    }\n  }\n  get value() {\n    return this._value;\n  }\n  set value(val) {\n    this._value = val;\n  }\n  updateSerializedValue() {\n    this.serializedValue = [];\n    if (this.paginator) this.serializePageNodes();else this.serializeNodes(null, this.filteredNodes || this.value, 0, true);\n  }\n  serializeNodes(parent, nodes, level, visible) {\n    if (nodes && nodes.length) {\n      for (let node of nodes) {\n        node.parent = parent;\n        const rowNode = {\n          node: node,\n          parent: parent,\n          level: level,\n          visible: visible && (parent ? parent.expanded : true)\n        };\n        this.serializedValue.push(rowNode);\n        if (rowNode.visible && node.expanded) {\n          this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n        }\n      }\n    }\n  }\n  serializePageNodes() {\n    let data = this.filteredNodes || this.value;\n    this.serializedValue = [];\n    if (data && data.length) {\n      const first = this.lazy ? 0 : this.first;\n      for (let i = first; i < first + this.rows; i++) {\n        let node = data[i];\n        if (node) {\n          this.serializedValue.push({\n            node: node,\n            parent: null,\n            level: 0,\n            visible: true\n          });\n          this.serializeNodes(node, node.children, 1, true);\n        }\n      }\n    }\n  }\n  get totalRecords() {\n    return this._totalRecords;\n  }\n  set totalRecords(val) {\n    this._totalRecords = val;\n    this.tableService.onTotalRecordsChange(this._totalRecords);\n  }\n  get sortField() {\n    return this._sortField;\n  }\n  set sortField(val) {\n    this._sortField = val;\n  }\n  get sortOrder() {\n    return this._sortOrder;\n  }\n  set sortOrder(val) {\n    this._sortOrder = val;\n  }\n  get multiSortMeta() {\n    return this._multiSortMeta;\n  }\n  set multiSortMeta(val) {\n    this._multiSortMeta = val;\n  }\n  get selection() {\n    return this._selection;\n  }\n  set selection(val) {\n    this._selection = val;\n  }\n  updateSelectionKeys() {\n    if (this.dataKey && this._selection) {\n      this.selectionKeys = {};\n      if (Array.isArray(this._selection)) {\n        for (let node of this._selection) {\n          this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n        }\n      } else {\n        this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n      }\n    }\n  }\n  onPageChange(event) {\n    this.first = event.first;\n    this.rows = event.rows;\n    if (this.lazy) this.onLazyLoad.emit(this.createLazyLoadMetadata());else this.serializePageNodes();\n    this.onPage.emit({\n      first: this.first,\n      rows: this.rows\n    });\n    this.tableService.onUIUpdate(this.value);\n    if (this.scrollable) {\n      this.resetScrollTop();\n    }\n  }\n  sort(event) {\n    let originalEvent = event.originalEvent;\n    if (this.sortMode === 'single') {\n      this._sortOrder = this.sortField === event.field ? this.sortOrder * -1 : this.defaultSortOrder;\n      this._sortField = event.field;\n      this.sortSingle();\n      if (this.resetPageOnSort && this.scrollable) {\n        this.resetScrollTop();\n      }\n    }\n    if (this.sortMode === 'multiple') {\n      let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n      let sortMeta = this.getSortMeta(event.field);\n      if (sortMeta) {\n        if (!metaKey) {\n          this._multiSortMeta = [{\n            field: event.field,\n            order: sortMeta.order * -1\n          }];\n          if (this.resetPageOnSort && this.scrollable) {\n            this.resetScrollTop();\n          }\n        } else {\n          sortMeta.order = sortMeta.order * -1;\n        }\n      } else {\n        if (!metaKey || !this.multiSortMeta) {\n          this._multiSortMeta = [];\n          if (this.resetPageOnSort && this.scrollable) {\n            this.resetScrollTop();\n          }\n        }\n        this.multiSortMeta.push({\n          field: event.field,\n          order: this.defaultSortOrder\n        });\n      }\n      this.sortMultiple();\n    }\n  }\n  sortSingle() {\n    if (this.sortField && this.sortOrder) {\n      if (this.lazy) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      } else if (this.value) {\n        this.sortNodes(this.value);\n        if (this.hasFilter()) {\n          this._filter();\n        }\n      }\n      let sortMeta = {\n        field: this.sortField,\n        order: this.sortOrder\n      };\n      this.onSort.emit(sortMeta);\n      this.tableService.onSort(sortMeta);\n      this.updateSerializedValue();\n    }\n  }\n  sortNodes(nodes) {\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n    if (this.customSort) {\n      this.sortFunction.emit({\n        data: nodes,\n        mode: this.sortMode,\n        field: this.sortField,\n        order: this.sortOrder\n      });\n    } else {\n      nodes.sort((node1, node2) => {\n        let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n        let result = null;\n        if (value1 == null && value2 != null) result = -1;else if (value1 != null && value2 == null) result = 1;else if (value1 == null && value2 == null) result = 0;else if (typeof value1 === 'string' && typeof value2 === 'string') result = value1.localeCompare(value2, undefined, {\n          numeric: true\n        });else result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;\n        return this.sortOrder * result;\n      });\n    }\n    for (let node of nodes) {\n      this.sortNodes(node.children);\n    }\n  }\n  sortMultiple() {\n    if (this.multiSortMeta) {\n      if (this.lazy) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      } else if (this.value) {\n        this.sortMultipleNodes(this.value);\n        if (this.hasFilter()) {\n          this._filter();\n        }\n      }\n      this.onSort.emit({\n        multisortmeta: this.multiSortMeta\n      });\n      this.updateSerializedValue();\n      this.tableService.onSort(this.multiSortMeta);\n    }\n  }\n  sortMultipleNodes(nodes) {\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n    if (this.customSort) {\n      this.sortFunction.emit({\n        data: this.value,\n        mode: this.sortMode,\n        multiSortMeta: this.multiSortMeta\n      });\n    } else {\n      nodes.sort((node1, node2) => {\n        return this.multisortField(node1, node2, this.multiSortMeta, 0);\n      });\n    }\n    for (let node of nodes) {\n      this.sortMultipleNodes(node.children);\n    }\n  }\n  multisortField(node1, node2, multiSortMeta, index) {\n    if (ObjectUtils.isEmpty(this.multiSortMeta) || ObjectUtils.isEmpty(multiSortMeta[index])) {\n      return 0;\n    }\n    let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n    let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n    let result = null;\n    if (value1 == null && value2 != null) result = -1;else if (value1 != null && value2 == null) result = 1;else if (value1 == null && value2 == null) result = 0;\n    if (typeof value1 == 'string' || value1 instanceof String) {\n      if (value1.localeCompare && value1 != value2) {\n        return multiSortMeta[index].order * value1.localeCompare(value2, undefined, {\n          numeric: true\n        });\n      }\n    } else {\n      result = value1 < value2 ? -1 : 1;\n    }\n    if (value1 == value2) {\n      return multiSortMeta.length - 1 > index ? this.multisortField(node1, node2, multiSortMeta, index + 1) : 0;\n    }\n    return multiSortMeta[index].order * result;\n  }\n  getSortMeta(field) {\n    if (this.multiSortMeta && this.multiSortMeta.length) {\n      for (let i = 0; i < this.multiSortMeta.length; i++) {\n        if (this.multiSortMeta[i].field === field) {\n          return this.multiSortMeta[i];\n        }\n      }\n    }\n    return null;\n  }\n  isSorted(field) {\n    if (this.sortMode === 'single') {\n      return this.sortField && this.sortField === field;\n    } else if (this.sortMode === 'multiple') {\n      let sorted = false;\n      if (this.multiSortMeta) {\n        for (let i = 0; i < this.multiSortMeta.length; i++) {\n          if (this.multiSortMeta[i].field == field) {\n            sorted = true;\n            break;\n          }\n        }\n      }\n      return sorted;\n    }\n  }\n  createLazyLoadMetadata() {\n    return {\n      first: this.first,\n      rows: this.rows,\n      sortField: this.sortField,\n      sortOrder: this.sortOrder,\n      filters: this.filters,\n      globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n      multiSortMeta: this.multiSortMeta,\n      forceUpdate: () => this.cd.detectChanges()\n    };\n  }\n  onLazyItemLoad(event) {\n    this.onLazyLoad.emit({\n      ...this.createLazyLoadMetadata(),\n      ...event,\n      rows: event.last - event.first\n    });\n  }\n  resetScrollTop() {\n    if (this.virtualScroll) this.scrollToVirtualIndex(0);else this.scrollTo({\n      top: 0\n    });\n  }\n  scrollToVirtualIndex(index) {\n    if (this.scrollableViewChild) {\n      this.scrollableViewChild.scrollToVirtualIndex(index);\n    }\n    if (this.scrollableFrozenViewChild) {\n      this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\n    }\n  }\n  scrollTo(options) {\n    if (this.scrollableViewChild) {\n      this.scrollableViewChild.scrollTo(options);\n    }\n    if (this.scrollableFrozenViewChild) {\n      this.scrollableFrozenViewChild.scrollTo(options);\n    }\n  }\n  isEmpty() {\n    let data = this.filteredNodes || this.value;\n    return data == null || data.length == 0;\n  }\n  getBlockableElement() {\n    return this.el.nativeElement.children[0];\n  }\n  onColumnResizeBegin(event) {\n    let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n    this.lastResizerHelperX = event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft;\n    event.preventDefault();\n  }\n  onColumnResize(event) {\n    let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n    DomHandler.addClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n    this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n    this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n    this.resizeHelperViewChild.nativeElement.style.left = event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft + 'px';\n    this.resizeHelperViewChild.nativeElement.style.display = 'block';\n  }\n  onColumnResizeEnd(event, column) {\n    let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n    let columnWidth = column.offsetWidth;\n    let newColumnWidth = columnWidth + delta;\n    let minWidth = column.style.minWidth || 15;\n    if (columnWidth + delta > parseInt(minWidth)) {\n      if (this.columnResizeMode === 'fit') {\n        let nextColumn = column.nextElementSibling;\n        while (!nextColumn.offsetParent) {\n          nextColumn = nextColumn.nextElementSibling;\n        }\n        if (nextColumn) {\n          let nextColumnWidth = nextColumn.offsetWidth - delta;\n          let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n          if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n            if (this.scrollable) {\n              let scrollableView = this.findParentScrollableView(column);\n              let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport table');\n              let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n              let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n              let resizeColumnIndex = DomHandler.index(column);\n              this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n              this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n              this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n            } else {\n              column.style.width = newColumnWidth + 'px';\n              if (nextColumn) {\n                nextColumn.style.width = nextColumnWidth + 'px';\n              }\n            }\n          }\n        }\n      } else if (this.columnResizeMode === 'expand') {\n        if (this.scrollable) {\n          let scrollableView = this.findParentScrollableView(column);\n          let scrollableBody = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport');\n          let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-header');\n          let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-footer');\n          let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport table');\n          let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n          let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n          scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n          scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n          if (scrollableFooterTable) {\n            scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\n          }\n          let resizeColumnIndex = DomHandler.index(column);\n          const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n          const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n          const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n          let setWidth = (container, table, width, isContainerInViewport) => {\n            if (container && table) {\n              container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto';\n              table.style.width = width + 'px';\n            }\n          };\n          setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n          setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n          setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n          this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n          this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n          this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n        } else {\n          this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n          column.style.width = newColumnWidth + 'px';\n          let containerWidth = this.tableViewChild.nativeElement.style.width;\n          this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n        }\n      }\n      this.onColResize.emit({\n        element: column,\n        delta: delta\n      });\n    }\n    this.resizeHelperViewChild.nativeElement.style.display = 'none';\n    DomHandler.removeClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n  }\n  findParentScrollableView(column) {\n    if (column) {\n      let parent = column.parentElement;\n      while (parent && !DomHandler.hasClass(parent, 'p-treetable-scrollable-view')) {\n        parent = parent.parentElement;\n      }\n      return parent;\n    } else {\n      return null;\n    }\n  }\n  resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n    if (table) {\n      let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n      if (colGroup) {\n        let col = colGroup.children[resizeColumnIndex];\n        let nextCol = col.nextElementSibling;\n        col.style.width = newColumnWidth + 'px';\n        if (nextCol && nextColumnWidth) {\n          nextCol.style.width = nextColumnWidth + 'px';\n        }\n      } else {\n        throw 'Scrollable tables require a colgroup to support resizable columns';\n      }\n    }\n  }\n  onColumnDragStart(event, columnElement) {\n    this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n    this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n    this.draggedColumn = columnElement;\n    event.dataTransfer.setData('text', 'b'); // For firefox\n  }\n\n  onColumnDragEnter(event, dropHeader) {\n    if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n      event.preventDefault();\n      let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n      let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n      if (this.draggedColumn != dropHeader) {\n        let targetLeft = dropHeaderOffset.left - containerOffset.left;\n        let targetTop = containerOffset.top - dropHeaderOffset.top;\n        let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n        this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n        this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n        if (event.pageX > columnCenter) {\n          this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.dropPosition = 1;\n        } else {\n          this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.dropPosition = -1;\n        }\n        this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n        this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n      } else {\n        event.dataTransfer.dropEffect = 'none';\n      }\n    }\n  }\n  onColumnDragLeave(event) {\n    if (this.reorderableColumns && this.draggedColumn) {\n      event.preventDefault();\n      this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n      this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n    }\n  }\n  onColumnDrop(event, dropColumn) {\n    event.preventDefault();\n    if (this.draggedColumn) {\n      let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n      let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n      let allowDrop = dragIndex != dropIndex;\n      if (allowDrop && (dropIndex - dragIndex == 1 && this.dropPosition === -1 || dragIndex - dropIndex == 1 && this.dropPosition === 1)) {\n        allowDrop = false;\n      }\n      if (allowDrop && dropIndex < dragIndex && this.dropPosition === 1) {\n        dropIndex = dropIndex + 1;\n      }\n      if (allowDrop && dropIndex > dragIndex && this.dropPosition === -1) {\n        dropIndex = dropIndex - 1;\n      }\n      if (allowDrop) {\n        ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n        this.onColReorder.emit({\n          dragIndex: dragIndex,\n          dropIndex: dropIndex,\n          columns: this.columns\n        });\n      }\n      this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n      this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n      this.draggedColumn.draggable = false;\n      this.draggedColumn = null;\n      this.dropPosition = null;\n    }\n  }\n  handleRowClick(event) {\n    let targetNode = event.originalEvent.target.nodeName;\n    if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || DomHandler.hasClass(event.originalEvent.target, 'p-clickable')) {\n      return;\n    }\n    if (this.selectionMode) {\n      this.preventSelectionSetterPropagation = true;\n      let rowNode = event.rowNode;\n      let selected = this.isSelected(rowNode.node);\n      let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n      let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n      if (metaSelection) {\n        let metaKey = event.originalEvent.metaKey || event.originalEvent.ctrlKey;\n        if (selected && metaKey) {\n          if (this.isSingleSelectionMode()) {\n            this._selection = null;\n            this.selectionKeys = {};\n            this.selectionChange.emit(null);\n          } else {\n            let selectionIndex = this.findIndexInSelection(rowNode.node);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            this.selectionChange.emit(this.selection);\n            if (dataKeyValue) {\n              delete this.selectionKeys[dataKeyValue];\n            }\n          }\n          this.onNodeUnselect.emit({\n            originalEvent: event.originalEvent,\n            node: rowNode.node,\n            type: 'row'\n          });\n        } else {\n          if (this.isSingleSelectionMode()) {\n            this._selection = rowNode.node;\n            this.selectionChange.emit(rowNode.node);\n            if (dataKeyValue) {\n              this.selectionKeys = {};\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          } else if (this.isMultipleSelectionMode()) {\n            if (metaKey) {\n              this._selection = this.selection || [];\n            } else {\n              this._selection = [];\n              this.selectionKeys = {};\n            }\n            this._selection = [...this.selection, rowNode.node];\n            this.selectionChange.emit(this.selection);\n            if (dataKeyValue) {\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          }\n          this.onNodeSelect.emit({\n            originalEvent: event.originalEvent,\n            node: rowNode.node,\n            type: 'row',\n            index: event.rowIndex\n          });\n        }\n      } else {\n        if (this.selectionMode === 'single') {\n          if (selected) {\n            this._selection = null;\n            this.selectionKeys = {};\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row'\n            });\n          } else {\n            this._selection = rowNode.node;\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row',\n              index: event.rowIndex\n            });\n            if (dataKeyValue) {\n              this.selectionKeys = {};\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          }\n        } else if (this.selectionMode === 'multiple') {\n          if (selected) {\n            let selectionIndex = this.findIndexInSelection(rowNode.node);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row'\n            });\n            if (dataKeyValue) {\n              delete this.selectionKeys[dataKeyValue];\n            }\n          } else {\n            this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row',\n              index: event.rowIndex\n            });\n            if (dataKeyValue) {\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          }\n        }\n      }\n      this.tableService.onSelectionChange();\n    }\n    this.rowTouched = false;\n  }\n  handleRowTouchEnd(event) {\n    this.rowTouched = true;\n  }\n  handleRowRightClick(event) {\n    if (this.contextMenu) {\n      const node = event.rowNode.node;\n      if (this.contextMenuSelectionMode === 'separate') {\n        this.contextMenuSelection = node;\n        this.contextMenuSelectionChange.emit(node);\n        this.onContextMenuSelect.emit({\n          originalEvent: event.originalEvent,\n          node: node\n        });\n        this.contextMenu.show(event.originalEvent);\n        this.tableService.onContextMenu(node);\n      } else if (this.contextMenuSelectionMode === 'joint') {\n        this.preventSelectionSetterPropagation = true;\n        let selected = this.isSelected(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n        if (!selected) {\n          if (this.isSingleSelectionMode()) {\n            this.selection = node;\n            this.selectionChange.emit(node);\n          } else if (this.isMultipleSelectionMode()) {\n            this.selection = [node];\n            this.selectionChange.emit(this.selection);\n          }\n          if (dataKeyValue) {\n            this.selectionKeys[dataKeyValue] = 1;\n          }\n        }\n        this.contextMenu.show(event.originalEvent);\n        this.onContextMenuSelect.emit({\n          originalEvent: event.originalEvent,\n          node: node\n        });\n      }\n    }\n  }\n  toggleNodeWithCheckbox(event) {\n    this.selection = this.selection || [];\n    this.preventSelectionSetterPropagation = true;\n    let node = event.rowNode.node;\n    let selected = this.isSelected(node);\n    if (selected) {\n      this.propagateSelectionDown(node, false);\n      if (event.rowNode.parent) {\n        this.propagateSelectionUp(node.parent, false);\n      }\n      this.selectionChange.emit(this.selection);\n      this.onNodeUnselect.emit({\n        originalEvent: event,\n        node: node\n      });\n    } else {\n      this.propagateSelectionDown(node, true);\n      if (event.rowNode.parent) {\n        this.propagateSelectionUp(node.parent, true);\n      }\n      this.selectionChange.emit(this.selection);\n      this.onNodeSelect.emit({\n        originalEvent: event,\n        node: node\n      });\n    }\n    this.tableService.onSelectionChange();\n  }\n  toggleNodesWithCheckbox(event, check) {\n    let data = this.filteredNodes || this.value;\n    this._selection = check && data ? data.slice() : [];\n    if (check) {\n      if (data && data.length) {\n        for (let node of data) {\n          this.propagateSelectionDown(node, true);\n        }\n      }\n    } else {\n      this._selection = [];\n      this.selectionKeys = {};\n    }\n    this.preventSelectionSetterPropagation = true;\n    this.selectionChange.emit(this._selection);\n    this.tableService.onSelectionChange();\n    this.onHeaderCheckboxToggle.emit({\n      originalEvent: event,\n      checked: check\n    });\n  }\n  propagateSelectionUp(node, select) {\n    if (node.children && node.children.length) {\n      let selectedChildCount = 0;\n      let childPartialSelected = false;\n      let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n      for (let child of node.children) {\n        if (this.isSelected(child)) selectedChildCount++;else if (child.partialSelected) childPartialSelected = true;\n      }\n      if (select && selectedChildCount == node.children.length) {\n        this._selection = [...(this.selection || []), node];\n        node.partialSelected = false;\n        if (dataKeyValue) {\n          this.selectionKeys[dataKeyValue] = 1;\n        }\n      } else {\n        if (!select) {\n          let index = this.findIndexInSelection(node);\n          if (index >= 0) {\n            this._selection = this.selection.filter((val, i) => i != index);\n            if (dataKeyValue) {\n              delete this.selectionKeys[dataKeyValue];\n            }\n          }\n        }\n        if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length) node.partialSelected = true;else node.partialSelected = false;\n      }\n    }\n    let parent = node.parent;\n    if (parent) {\n      this.propagateSelectionUp(parent, select);\n    }\n  }\n  propagateSelectionDown(node, select) {\n    let index = this.findIndexInSelection(node);\n    let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n    if (select && index == -1) {\n      this._selection = [...(this.selection || []), node];\n      if (dataKeyValue) {\n        this.selectionKeys[dataKeyValue] = 1;\n      }\n    } else if (!select && index > -1) {\n      this._selection = this.selection.filter((val, i) => i != index);\n      if (dataKeyValue) {\n        delete this.selectionKeys[dataKeyValue];\n      }\n    }\n    node.partialSelected = false;\n    if (node.children && node.children.length) {\n      for (let child of node.children) {\n        this.propagateSelectionDown(child, select);\n      }\n    }\n  }\n  isSelected(node) {\n    if (node && this.selection) {\n      if (this.dataKey) {\n        return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n      } else {\n        if (Array.isArray(this.selection)) return this.findIndexInSelection(node) > -1;else return this.equals(node, this.selection);\n      }\n    }\n    return false;\n  }\n  findIndexInSelection(node) {\n    let index = -1;\n    if (this.selection && this.selection.length) {\n      for (let i = 0; i < this.selection.length; i++) {\n        if (this.equals(node, this.selection[i])) {\n          index = i;\n          break;\n        }\n      }\n    }\n    return index;\n  }\n  isSingleSelectionMode() {\n    return this.selectionMode === 'single';\n  }\n  isMultipleSelectionMode() {\n    return this.selectionMode === 'multiple';\n  }\n  equals(node1, node2) {\n    return this.compareSelectionBy === 'equals' ? node1 === node2 : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n  }\n  filter(value, field, matchMode) {\n    if (this.filterTimeout) {\n      clearTimeout(this.filterTimeout);\n    }\n    if (!this.isFilterBlank(value)) {\n      this.filters[field] = {\n        value: value,\n        matchMode: matchMode\n      };\n    } else if (this.filters[field]) {\n      delete this.filters[field];\n    }\n    this.filterTimeout = setTimeout(() => {\n      this._filter();\n      this.filterTimeout = null;\n    }, this.filterDelay);\n  }\n  filterGlobal(value, matchMode) {\n    this.filter(value, 'global', matchMode);\n  }\n  isFilterBlank(filter) {\n    if (filter !== null && filter !== undefined) {\n      if (typeof filter === 'string' && filter.trim().length == 0 || Array.isArray(filter) && filter.length == 0) return true;else return false;\n    }\n    return true;\n  }\n  _filter() {\n    if (this.lazy) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    } else {\n      if (!this.value) {\n        return;\n      }\n      if (!this.hasFilter()) {\n        this.filteredNodes = null;\n        if (this.paginator) {\n          this.totalRecords = this.value ? this.value.length : 0;\n        }\n      } else {\n        let globalFilterFieldsArray;\n        if (this.filters['global']) {\n          if (!this.columns && !this.globalFilterFields) throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');else globalFilterFieldsArray = this.globalFilterFields || this.columns;\n        }\n        this.filteredNodes = [];\n        const isStrictMode = this.filterMode === 'strict';\n        let isValueChanged = false;\n        for (let node of this.value) {\n          let copyNode = {\n            ...node\n          };\n          let localMatch = true;\n          let globalMatch = false;\n          let paramsWithoutNode;\n          for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n              let filterMeta = this.filters[prop];\n              let filterField = prop;\n              let filterValue = filterMeta.value;\n              let filterMatchMode = filterMeta.matchMode || 'startsWith';\n              let filterConstraint = this.filterService.filters[filterMatchMode];\n              paramsWithoutNode = {\n                filterField,\n                filterValue,\n                filterConstraint,\n                isStrictMode\n              };\n              if (isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode)) || !isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode))) {\n                localMatch = false;\n              }\n              if (!localMatch) {\n                break;\n              }\n            }\n          }\n          if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n            for (let j = 0; j < globalFilterFieldsArray.length; j++) {\n              let copyNodeForGlobal = {\n                ...copyNode\n              };\n              let filterField = globalFilterFieldsArray[j].field || globalFilterFieldsArray[j];\n              let filterValue = this.filters['global'].value;\n              let filterConstraint = this.filterService.filters[this.filters['global'].matchMode];\n              paramsWithoutNode = {\n                filterField,\n                filterValue,\n                filterConstraint,\n                isStrictMode\n              };\n              if (isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode)) || !isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode))) {\n                globalMatch = true;\n                copyNode = copyNodeForGlobal;\n              }\n            }\n          }\n          let matches = localMatch;\n          if (this.filters['global']) {\n            matches = localMatch && globalMatch;\n          }\n          if (matches) {\n            this.filteredNodes.push(copyNode);\n          }\n          isValueChanged = isValueChanged || !localMatch || globalMatch || localMatch && this.filteredNodes.length > 0 || !globalMatch && this.filteredNodes.length === 0;\n        }\n        if (!isValueChanged) {\n          this.filteredNodes = null;\n        }\n        if (this.paginator) {\n          this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n        }\n      }\n    }\n    this.first = 0;\n    const filteredValue = this.filteredNodes || this.value;\n    this.onFilter.emit({\n      filters: this.filters,\n      filteredValue: filteredValue\n    });\n    this.tableService.onUIUpdate(filteredValue);\n    this.updateSerializedValue();\n    if (this.scrollable) {\n      this.resetScrollTop();\n    }\n  }\n  findFilteredNodes(node, paramsWithoutNode) {\n    if (node) {\n      let matched = false;\n      if (node.children) {\n        let childNodes = [...node.children];\n        node.children = [];\n        for (let childNode of childNodes) {\n          let copyChildNode = {\n            ...childNode\n          };\n          if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n            matched = true;\n            node.children.push(copyChildNode);\n          }\n        }\n      }\n      if (matched) {\n        return true;\n      }\n    }\n  }\n  isFilterMatched(node, {\n    filterField,\n    filterValue,\n    filterConstraint,\n    isStrictMode\n  }) {\n    let matched = false;\n    let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n    if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n      matched = true;\n    }\n    if (!matched || isStrictMode && !this.isNodeLeaf(node)) {\n      matched = this.findFilteredNodes(node, {\n        filterField,\n        filterValue,\n        filterConstraint,\n        isStrictMode\n      }) || matched;\n    }\n    return matched;\n  }\n  isNodeLeaf(node) {\n    return node.leaf === false ? false : !(node.children && node.children.length);\n  }\n  hasFilter() {\n    let empty = true;\n    for (let prop in this.filters) {\n      if (this.filters.hasOwnProperty(prop)) {\n        empty = false;\n        break;\n      }\n    }\n    return !empty;\n  }\n  reset() {\n    this._sortField = null;\n    this._sortOrder = 1;\n    this._multiSortMeta = null;\n    this.tableService.onSort(null);\n    this.filteredNodes = null;\n    this.filters = {};\n    this.first = 0;\n    if (this.lazy) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    } else {\n      this.totalRecords = this._value ? this._value.length : 0;\n    }\n  }\n  updateEditingCell(cell, data, field) {\n    this.editingCell = cell;\n    this.editingCellData = data;\n    this.editingCellField = field;\n    this.bindDocumentEditListener();\n  }\n  isEditingCellValid() {\n    return this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0;\n  }\n  bindDocumentEditListener() {\n    if (!this.documentEditListener) {\n      this.documentEditListener = event => {\n        if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n          DomHandler.removeClass(this.editingCell, 'p-cell-editing');\n          this.editingCell = null;\n          this.onEditComplete.emit({\n            field: this.editingCellField,\n            data: this.editingCellData\n          });\n          this.editingCellField = null;\n          this.editingCellData = null;\n          this.unbindDocumentEditListener();\n        }\n        this.editingCellClick = false;\n      };\n      document.addEventListener('click', this.documentEditListener);\n    }\n  }\n  unbindDocumentEditListener() {\n    if (this.documentEditListener) {\n      document.removeEventListener('click', this.documentEditListener);\n      this.documentEditListener = null;\n    }\n  }\n  ngOnDestroy() {\n    this.unbindDocumentEditListener();\n    this.editingCell = null;\n    this.editingCellField = null;\n    this.editingCellData = null;\n    this.initialized = null;\n  }\n}\nTreeTable.ɵfac = function TreeTable_Factory(t) {\n  return new (t || TreeTable)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i1.FilterService));\n};\nTreeTable.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeTable,\n  selectors: [[\"p-treeTable\"]],\n  contentQueries: function TreeTable_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n    }\n  },\n  viewQuery: function TreeTable_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n      i0.ɵɵviewQuery(_c2, 5);\n      i0.ɵɵviewQuery(_c3, 5);\n      i0.ɵɵviewQuery(_c4, 5);\n      i0.ɵɵviewQuery(_c5, 5);\n      i0.ɵɵviewQuery(_c6, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.resizeHelperViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.reorderIndicatorUpViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.reorderIndicatorDownViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollableViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollableFrozenViewChild = _t.first);\n    }\n  },\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    columns: \"columns\",\n    style: \"style\",\n    styleClass: \"styleClass\",\n    tableStyle: \"tableStyle\",\n    tableStyleClass: \"tableStyleClass\",\n    autoLayout: \"autoLayout\",\n    lazy: \"lazy\",\n    lazyLoadOnInit: \"lazyLoadOnInit\",\n    paginator: \"paginator\",\n    rows: \"rows\",\n    first: \"first\",\n    pageLinks: \"pageLinks\",\n    rowsPerPageOptions: \"rowsPerPageOptions\",\n    alwaysShowPaginator: \"alwaysShowPaginator\",\n    paginatorPosition: \"paginatorPosition\",\n    paginatorDropdownAppendTo: \"paginatorDropdownAppendTo\",\n    currentPageReportTemplate: \"currentPageReportTemplate\",\n    showCurrentPageReport: \"showCurrentPageReport\",\n    showJumpToPageDropdown: \"showJumpToPageDropdown\",\n    showFirstLastIcon: \"showFirstLastIcon\",\n    showPageLinks: \"showPageLinks\",\n    defaultSortOrder: \"defaultSortOrder\",\n    sortMode: \"sortMode\",\n    resetPageOnSort: \"resetPageOnSort\",\n    customSort: \"customSort\",\n    selectionMode: \"selectionMode\",\n    contextMenuSelection: \"contextMenuSelection\",\n    contextMenuSelectionMode: \"contextMenuSelectionMode\",\n    dataKey: \"dataKey\",\n    metaKeySelection: \"metaKeySelection\",\n    compareSelectionBy: \"compareSelectionBy\",\n    rowHover: \"rowHover\",\n    loading: \"loading\",\n    loadingIcon: \"loadingIcon\",\n    showLoader: \"showLoader\",\n    scrollable: \"scrollable\",\n    scrollHeight: \"scrollHeight\",\n    virtualScroll: \"virtualScroll\",\n    virtualScrollItemSize: \"virtualScrollItemSize\",\n    virtualScrollOptions: \"virtualScrollOptions\",\n    virtualScrollDelay: \"virtualScrollDelay\",\n    frozenWidth: \"frozenWidth\",\n    frozenColumns: \"frozenColumns\",\n    resizableColumns: \"resizableColumns\",\n    columnResizeMode: \"columnResizeMode\",\n    reorderableColumns: \"reorderableColumns\",\n    contextMenu: \"contextMenu\",\n    rowTrackBy: \"rowTrackBy\",\n    filters: \"filters\",\n    globalFilterFields: \"globalFilterFields\",\n    filterDelay: \"filterDelay\",\n    filterMode: \"filterMode\",\n    filterLocale: \"filterLocale\",\n    virtualRowHeight: \"virtualRowHeight\",\n    value: \"value\",\n    totalRecords: \"totalRecords\",\n    sortField: \"sortField\",\n    sortOrder: \"sortOrder\",\n    multiSortMeta: \"multiSortMeta\",\n    selection: \"selection\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    contextMenuSelectionChange: \"contextMenuSelectionChange\",\n    onFilter: \"onFilter\",\n    onNodeExpand: \"onNodeExpand\",\n    onNodeCollapse: \"onNodeCollapse\",\n    onPage: \"onPage\",\n    onSort: \"onSort\",\n    onLazyLoad: \"onLazyLoad\",\n    sortFunction: \"sortFunction\",\n    onColResize: \"onColResize\",\n    onColReorder: \"onColReorder\",\n    onNodeSelect: \"onNodeSelect\",\n    onNodeUnselect: \"onNodeUnselect\",\n    onContextMenuSelect: \"onContextMenuSelect\",\n    onHeaderCheckboxToggle: \"onHeaderCheckboxToggle\",\n    onEditInit: \"onEditInit\",\n    onEditComplete: \"onEditComplete\",\n    onEditCancel: \"onEditCancel\"\n  },\n  features: [i0.ɵɵProvidersFeature([TreeTableService]), i0.ɵɵNgOnChangesFeature],\n  decls: 12,\n  vars: 20,\n  consts: [[\"data-scrollselectors\", \".p-treetable-scrollable-body\", 3, \"ngStyle\", \"ngClass\"], [\"container\", \"\"], [\"class\", \"p-treetable-loading\", 4, \"ngIf\"], [\"class\", \"p-treetable-header\", 4, \"ngIf\"], [\"styleClass\", \"p-paginator-top\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\", 4, \"ngIf\"], [\"class\", \"p-treetable-wrapper\", 4, \"ngIf\"], [\"class\", \"p-treetable-scrollable-wrapper\", 4, \"ngIf\"], [\"styleClass\", \"p-paginator-bottom\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\", 4, \"ngIf\"], [\"class\", \"p-treetable-footer\", 4, \"ngIf\"], [\"class\", \"p-column-resizer-helper\", \"style\", \"display:none\", 4, \"ngIf\"], [\"class\", \"pi pi-arrow-down p-treetable-reorder-indicator-up\", 4, \"ngIf\"], [\"class\", \"pi pi-arrow-up p-treetable-reorder-indicator-down\", 4, \"ngIf\"], [1, \"p-treetable-loading\"], [1, \"p-treetable-loading-overlay\", \"p-component-overlay\"], [1, \"p-treetable-header\"], [4, \"ngTemplateOutlet\"], [\"styleClass\", \"p-paginator-top\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\"], [1, \"p-treetable-wrapper\"], [3, \"ngClass\", \"ngStyle\"], [\"table\", \"\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"p-treetable-thead\"], [1, \"p-treetable-tbody\", 3, \"pTreeTableBody\", \"pTreeTableBodyTemplate\"], [1, \"p-treetable-tfoot\"], [1, \"p-treetable-scrollable-wrapper\"], [\"class\", \"p-treetable-scrollable-view p-treetable-frozen-view\", 3, \"ttScrollableView\", \"frozen\", \"ngStyle\", \"scrollHeight\", 4, \"ngIf\"], [1, \"p-treetable-scrollable-view\", 3, \"ttScrollableView\", \"frozen\", \"scrollHeight\", \"ngStyle\"], [\"scrollableView\", \"\"], [1, \"p-treetable-scrollable-view\", \"p-treetable-frozen-view\", 3, \"ttScrollableView\", \"frozen\", \"ngStyle\", \"scrollHeight\"], [\"scrollableFrozenView\", \"\"], [\"styleClass\", \"p-paginator-bottom\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\"], [1, \"p-treetable-footer\"], [1, \"p-column-resizer-helper\", 2, \"display\", \"none\"], [\"resizeHelper\", \"\"], [1, \"pi\", \"pi-arrow-down\", \"p-treetable-reorder-indicator-up\"], [\"reorderIndicatorUp\", \"\"], [1, \"pi\", \"pi-arrow-up\", \"p-treetable-reorder-indicator-down\"], [\"reorderIndicatorDown\", \"\"]],\n  template: function TreeTable_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵtemplate(2, TreeTable_div_2_Template, 3, 2, \"div\", 2);\n      i0.ɵɵtemplate(3, TreeTable_div_3_Template, 2, 1, \"div\", 3);\n      i0.ɵɵtemplate(4, TreeTable_p_paginator_4_Template, 1, 15, \"p-paginator\", 4);\n      i0.ɵɵtemplate(5, TreeTable_div_5_Template, 9, 16, \"div\", 5);\n      i0.ɵɵtemplate(6, TreeTable_div_6_Template, 4, 8, \"div\", 6);\n      i0.ɵɵtemplate(7, TreeTable_p_paginator_7_Template, 1, 15, \"p-paginator\", 7);\n      i0.ɵɵtemplate(8, TreeTable_div_8_Template, 2, 1, \"div\", 8);\n      i0.ɵɵtemplate(9, TreeTable_div_9_Template, 2, 0, \"div\", 9);\n      i0.ɵɵtemplate(10, TreeTable_span_10_Template, 2, 0, \"span\", 10);\n      i0.ɵɵtemplate(11, TreeTable_span_11_Template, 2, 0, \"span\", 11);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.styleClass);\n      i0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", i0.ɵɵpureFunction5(14, _c10, ctx.rowHover || ctx.selectionMode === \"single\" || ctx.selectionMode === \"multiple\", ctx.autoLayout, ctx.resizableColumns, ctx.resizableColumns && ctx.columnResizeMode === \"fit\", ctx.scrollable && ctx.scrollHeight === \"flex\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.loading && ctx.showLoader);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.captionTemplate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.paginator && (ctx.paginatorPosition === \"top\" || ctx.paginatorPosition == \"both\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.scrollable);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.scrollable);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.paginator && (ctx.paginatorPosition === \"bottom\" || ctx.paginatorPosition == \"both\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.summaryTemplate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.resizableColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.reorderableColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.reorderableColumns);\n    }\n  },\n  dependencies: function () {\n    return [i2.NgClass, i2.NgIf, i2.NgTemplateOutlet, i2.NgStyle, i3.Paginator, TTScrollableView, TTBody];\n  },\n  styles: [\".p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-icon,.p-treetable .p-sortable-column .p-sortable-column-badge{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;overflow:hidden;position:relative}p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}p-treetabletoggler+p-treetablecheckbox+span{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-header,.p-treetable-scrollable-footer{overflow:hidden}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0 none}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0 none}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper,.p-treetable-flex-scrollable .p-treetable-scrollable-view{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-virtual-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-thead>tr>th,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-tbody>tr>td{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-editor-cancel,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-up,.p-treetable-reorder-indicator-down{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}.p-treetable .p-scroller-loading{transform:none!important;min-height:0;position:sticky;top:0;left:0}\\n\"],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTable, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTable',\n      template: `\n        <div\n            #container\n            [ngStyle]=\"style\"\n            [class]=\"styleClass\"\n            data-scrollselectors=\".p-treetable-scrollable-body\"\n            [ngClass]=\"{\n                'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': rowHover || selectionMode === 'single' || selectionMode === 'multiple',\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': resizableColumns && columnResizeMode === 'fit',\n                'p-treetable-flex-scrollable': scrollable && scrollHeight === 'flex'\n            }\"\n        >\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-top\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n            ></p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n                <div\n                    class=\"p-treetable-scrollable-view p-treetable-frozen-view\"\n                    *ngIf=\"frozenColumns || frozenBodyTemplate\"\n                    #scrollableFrozenView\n                    [ttScrollableView]=\"frozenColumns\"\n                    [frozen]=\"true\"\n                    [ngStyle]=\"{ width: frozenWidth }\"\n                    [scrollHeight]=\"scrollHeight\"\n                ></div>\n                <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{ left: frozenWidth, width: 'calc(100% - ' + frozenWidth + ')' }\"></div>\n            </div>\n\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-bottom\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n            ></p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down p-treetable-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up p-treetable-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n      providers: [TreeTableService],\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      },\n      styles: [\".p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-icon,.p-treetable .p-sortable-column .p-sortable-column-badge{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;overflow:hidden;position:relative}p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}p-treetabletoggler+p-treetablecheckbox+span{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-header,.p-treetable-scrollable-footer{overflow:hidden}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0 none}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0 none}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper,.p-treetable-flex-scrollable .p-treetable-scrollable-view{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-virtual-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-thead>tr>th,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-tbody>tr>td{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-editor-cancel,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-up,.p-treetable-reorder-indicator-down{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}.p-treetable .p-scroller-loading{transform:none!important;min-height:0;position:sticky;top:0;left:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: TreeTableService\n    }, {\n      type: i1.FilterService\n    }];\n  }, {\n    columns: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    tableStyle: [{\n      type: Input\n    }],\n    tableStyleClass: [{\n      type: Input\n    }],\n    autoLayout: [{\n      type: Input\n    }],\n    lazy: [{\n      type: Input\n    }],\n    lazyLoadOnInit: [{\n      type: Input\n    }],\n    paginator: [{\n      type: Input\n    }],\n    rows: [{\n      type: Input\n    }],\n    first: [{\n      type: Input\n    }],\n    pageLinks: [{\n      type: Input\n    }],\n    rowsPerPageOptions: [{\n      type: Input\n    }],\n    alwaysShowPaginator: [{\n      type: Input\n    }],\n    paginatorPosition: [{\n      type: Input\n    }],\n    paginatorDropdownAppendTo: [{\n      type: Input\n    }],\n    currentPageReportTemplate: [{\n      type: Input\n    }],\n    showCurrentPageReport: [{\n      type: Input\n    }],\n    showJumpToPageDropdown: [{\n      type: Input\n    }],\n    showFirstLastIcon: [{\n      type: Input\n    }],\n    showPageLinks: [{\n      type: Input\n    }],\n    defaultSortOrder: [{\n      type: Input\n    }],\n    sortMode: [{\n      type: Input\n    }],\n    resetPageOnSort: [{\n      type: Input\n    }],\n    customSort: [{\n      type: Input\n    }],\n    selectionMode: [{\n      type: Input\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    contextMenuSelection: [{\n      type: Input\n    }],\n    contextMenuSelectionChange: [{\n      type: Output\n    }],\n    contextMenuSelectionMode: [{\n      type: Input\n    }],\n    dataKey: [{\n      type: Input\n    }],\n    metaKeySelection: [{\n      type: Input\n    }],\n    compareSelectionBy: [{\n      type: Input\n    }],\n    rowHover: [{\n      type: Input\n    }],\n    loading: [{\n      type: Input\n    }],\n    loadingIcon: [{\n      type: Input\n    }],\n    showLoader: [{\n      type: Input\n    }],\n    scrollable: [{\n      type: Input\n    }],\n    scrollHeight: [{\n      type: Input\n    }],\n    virtualScroll: [{\n      type: Input\n    }],\n    virtualScrollItemSize: [{\n      type: Input\n    }],\n    virtualScrollOptions: [{\n      type: Input\n    }],\n    virtualScrollDelay: [{\n      type: Input\n    }],\n    frozenWidth: [{\n      type: Input\n    }],\n    frozenColumns: [{\n      type: Input\n    }],\n    resizableColumns: [{\n      type: Input\n    }],\n    columnResizeMode: [{\n      type: Input\n    }],\n    reorderableColumns: [{\n      type: Input\n    }],\n    contextMenu: [{\n      type: Input\n    }],\n    rowTrackBy: [{\n      type: Input\n    }],\n    filters: [{\n      type: Input\n    }],\n    globalFilterFields: [{\n      type: Input\n    }],\n    filterDelay: [{\n      type: Input\n    }],\n    filterMode: [{\n      type: Input\n    }],\n    filterLocale: [{\n      type: Input\n    }],\n    onFilter: [{\n      type: Output\n    }],\n    onNodeExpand: [{\n      type: Output\n    }],\n    onNodeCollapse: [{\n      type: Output\n    }],\n    onPage: [{\n      type: Output\n    }],\n    onSort: [{\n      type: Output\n    }],\n    onLazyLoad: [{\n      type: Output\n    }],\n    sortFunction: [{\n      type: Output\n    }],\n    onColResize: [{\n      type: Output\n    }],\n    onColReorder: [{\n      type: Output\n    }],\n    onNodeSelect: [{\n      type: Output\n    }],\n    onNodeUnselect: [{\n      type: Output\n    }],\n    onContextMenuSelect: [{\n      type: Output\n    }],\n    onHeaderCheckboxToggle: [{\n      type: Output\n    }],\n    onEditInit: [{\n      type: Output\n    }],\n    onEditComplete: [{\n      type: Output\n    }],\n    onEditCancel: [{\n      type: Output\n    }],\n    containerViewChild: [{\n      type: ViewChild,\n      args: ['container']\n    }],\n    resizeHelperViewChild: [{\n      type: ViewChild,\n      args: ['resizeHelper']\n    }],\n    reorderIndicatorUpViewChild: [{\n      type: ViewChild,\n      args: ['reorderIndicatorUp']\n    }],\n    reorderIndicatorDownViewChild: [{\n      type: ViewChild,\n      args: ['reorderIndicatorDown']\n    }],\n    tableViewChild: [{\n      type: ViewChild,\n      args: ['table']\n    }],\n    scrollableViewChild: [{\n      type: ViewChild,\n      args: ['scrollableView']\n    }],\n    scrollableFrozenViewChild: [{\n      type: ViewChild,\n      args: ['scrollableFrozenView']\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }],\n    virtualRowHeight: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    totalRecords: [{\n      type: Input\n    }],\n    sortField: [{\n      type: Input\n    }],\n    sortOrder: [{\n      type: Input\n    }],\n    multiSortMeta: [{\n      type: Input\n    }],\n    selection: [{\n      type: Input\n    }]\n  });\n})();\nclass TTBody {\n  constructor(tt, treeTableService, cd) {\n    this.tt = tt;\n    this.treeTableService = treeTableService;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n      if (this.tt.virtualScroll) {\n        this.cd.detectChanges();\n      }\n    });\n  }\n  getScrollerOption(option, options) {\n    if (this.tt.virtualScroll) {\n      options = options || this.scrollerOptions;\n      return options ? options[option] : null;\n    }\n    return null;\n  }\n  getRowIndex(rowIndex) {\n    const getItemOptions = this.getScrollerOption('getItemOptions');\n    return getItemOptions ? getItemOptions(rowIndex).index : rowIndex;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\nTTBody.ɵfac = function TTBody_Factory(t) {\n  return new (t || TTBody)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\nTTBody.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TTBody,\n  selectors: [[\"\", \"pTreeTableBody\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    columns: [\"pTreeTableBody\", \"columns\"],\n    template: [\"pTreeTableBodyTemplate\", \"template\"],\n    frozen: \"frozen\",\n    serializedNodes: \"serializedNodes\",\n    scrollerOptions: \"scrollerOptions\"\n  },\n  attrs: _c11,\n  decls: 2,\n  vars: 3,\n  consts: [[\"ngFor\", \"\", 3, \"ngForOf\", \"ngForTrackBy\"], [4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n  template: function TTBody_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TTBody_ng_template_0_Template, 1, 1, \"ng-template\", 0);\n      i0.ɵɵtemplate(1, TTBody_ng_container_1_Template, 2, 5, \"ng-container\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.serializedNodes || ctx.tt.serializedValue)(\"ngForTrackBy\", ctx.tt.rowTrackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.tt.isEmpty());\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i2.NgTemplateOutlet],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTBody, [{\n    type: Component,\n    args: [{\n      selector: '[pTreeTableBody]',\n      template: `\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"serializedNodes || tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n            <ng-container *ngIf=\"serializedNode.visible\">\n                <ng-container *ngTemplateOutlet=\"template; context: { $implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns }\"></ng-container>\n            </ng-container>\n        </ng-template>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: { $implicit: columns, frozen: frozen }\"></ng-container>\n        </ng-container>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    columns: [{\n      type: Input,\n      args: ['pTreeTableBody']\n    }],\n    template: [{\n      type: Input,\n      args: ['pTreeTableBodyTemplate']\n    }],\n    frozen: [{\n      type: Input\n    }],\n    serializedNodes: [{\n      type: Input\n    }],\n    scrollerOptions: [{\n      type: Input\n    }]\n  });\n})();\nclass TTScrollableView {\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n  get scrollHeight() {\n    return this._scrollHeight;\n  }\n  set scrollHeight(val) {\n    this._scrollHeight = val;\n    if (val != null && (val.includes('%') || val.includes('calc'))) {\n      console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.');\n    }\n  }\n  ngAfterViewInit() {\n    if (!this.frozen) {\n      if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n        DomHandler.addClass(this.el.nativeElement, 'p-treetable-unfrozen-view');\n      }\n      let frozenView = this.el.nativeElement.previousElementSibling;\n      if (frozenView) {\n        if (this.tt.virtualScroll) this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-scroller-viewport');else this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\n      }\n      let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n      this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n      if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n        this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n      }\n    } else {\n      if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n        this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n      }\n    }\n    this.bindEvents();\n  }\n  bindEvents() {\n    this.zone.runOutsideAngular(() => {\n      if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n        this.headerScrollListener = this.onHeaderScroll.bind(this);\n        this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n      }\n      if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n        this.footerScrollListener = this.onFooterScroll.bind(this);\n        this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n      }\n      if (!this.frozen) {\n        this.bodyScrollListener = this.onBodyScroll.bind(this);\n        if (this.tt.virtualScroll) this.scroller.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);else this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n      }\n    });\n  }\n  unbindEvents() {\n    if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n      this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n    }\n    if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n      this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n    }\n    if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n      this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n    }\n    if (this.scroller && this.scroller.getElementRef()) {\n      this.scroller.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n    }\n  }\n  onHeaderScroll() {\n    const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n    this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n    if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n      this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n    }\n    this.preventBodyScrollPropagation = true;\n  }\n  onFooterScroll() {\n    const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n    this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n    if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n      this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n    }\n    this.preventBodyScrollPropagation = true;\n  }\n  onBodyScroll(event) {\n    if (this.preventBodyScrollPropagation) {\n      this.preventBodyScrollPropagation = false;\n      return;\n    }\n    if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n      this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n    }\n    if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n      this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n    }\n    if (this.frozenSiblingBody) {\n      this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n    }\n  }\n  scrollToVirtualIndex(index) {\n    if (this.scroller) {\n      this.scroller.scrollToIndex(index);\n    }\n  }\n  scrollTo(options) {\n    if (this.scroller) {\n      this.scroller.scrollTo(options);\n    } else {\n      if (this.scrollBodyViewChild.nativeElement.scrollTo) {\n        this.scrollBodyViewChild.nativeElement.scrollTo(options);\n      } else {\n        this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n        this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n      }\n    }\n  }\n  ngOnDestroy() {\n    this.unbindEvents();\n    this.frozenSiblingBody = null;\n  }\n}\nTTScrollableView.ɵfac = function TTScrollableView_Factory(t) {\n  return new (t || TTScrollableView)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\nTTScrollableView.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TTScrollableView,\n  selectors: [[\"\", \"ttScrollableView\", \"\"]],\n  viewQuery: function TTScrollableView_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c14, 5);\n      i0.ɵɵviewQuery(_c15, 5);\n      i0.ɵɵviewQuery(_c16, 5);\n      i0.ɵɵviewQuery(_c17, 5);\n      i0.ɵɵviewQuery(_c18, 5);\n      i0.ɵɵviewQuery(_c19, 5);\n      i0.ɵɵviewQuery(_c20, 5);\n      i0.ɵɵviewQuery(_c21, 5);\n      i0.ɵɵviewQuery(_c22, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollHeaderViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollHeaderBoxViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollBodyViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollTableViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollLoadingTableViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollFooterViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollFooterBoxViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollableAlignerViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scroller = _t.first);\n    }\n  },\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    columns: [\"ttScrollableView\", \"columns\"],\n    frozen: \"frozen\",\n    scrollHeight: \"scrollHeight\"\n  },\n  attrs: _c23,\n  decls: 13,\n  vars: 13,\n  consts: [[1, \"p-treetable-scrollable-header\"], [\"scrollHeader\", \"\"], [1, \"p-treetable-scrollable-header-box\"], [\"scrollHeaderBox\", \"\"], [1, \"p-treetable-scrollable-header-table\", 3, \"ngClass\", \"ngStyle\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"p-treetable-thead\"], [\"styleClass\", \"p-treetable-scrollable-body\", 3, \"items\", \"style\", \"scrollHeight\", \"itemSize\", \"lazy\", \"options\", \"onLazyLoad\", 4, \"ngIf\"], [4, \"ngIf\"], [\"buildInItems\", \"\"], [\"class\", \"p-treetable-scrollable-footer\", 4, \"ngIf\"], [\"styleClass\", \"p-treetable-scrollable-body\", 3, \"items\", \"scrollHeight\", \"itemSize\", \"lazy\", \"options\", \"onLazyLoad\"], [\"scroller\", \"\"], [\"pTemplate\", \"content\"], [\"pTemplate\", \"loader\"], [1, \"p-treetable-scrollable-body\", 3, \"ngStyle\"], [\"scrollBody\", \"\"], [3, \"ngClass\", \"ngStyle\"], [\"scrollTable\", \"\"], [1, \"p-treetable-tbody\", 3, \"pTreeTableBody\", \"pTreeTableBodyTemplate\", \"serializedNodes\", \"frozen\"], [\"style\", \"background-color:transparent\", 4, \"ngIf\"], [2, \"background-color\", \"transparent\"], [\"scrollableAligner\", \"\"], [1, \"p-treetable-scrollable-footer\"], [\"scrollFooter\", \"\"], [1, \"p-treetable-scrollable-footer-box\"], [\"scrollFooterBox\", \"\"], [1, \"p-treetable-scrollable-footer-table\", 3, \"ngClass\", \"ngStyle\"], [1, \"p-treetable-tfoot\"]],\n  template: function TTScrollableView_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"div\", 2, 3)(4, \"table\", 4);\n      i0.ɵɵtemplate(5, TTScrollableView_ng_container_5_Template, 1, 0, \"ng-container\", 5);\n      i0.ɵɵelementStart(6, \"thead\", 6);\n      i0.ɵɵtemplate(7, TTScrollableView_ng_container_7_Template, 1, 0, \"ng-container\", 5);\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵtemplate(8, TTScrollableView_p_scroller_8_Template, 4, 10, \"p-scroller\", 7);\n      i0.ɵɵtemplate(9, TTScrollableView_ng_container_9_Template, 4, 10, \"ng-container\", 8);\n      i0.ɵɵtemplate(10, TTScrollableView_ng_template_10_Template, 5, 15, \"ng-template\", null, 9, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(12, TTScrollableView_div_12_Template, 8, 10, \"div\", 10);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", ctx.tt.tableStyleClass)(\"ngStyle\", ctx.tt.tableStyle);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.frozen ? ctx.tt.frozenColGroupTemplate || ctx.tt.colGroupTemplate : ctx.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(9, _c7, ctx.columns));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.frozen ? ctx.tt.frozenHeaderTemplate || ctx.tt.headerTemplate : ctx.tt.headerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(11, _c7, ctx.columns));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.tt.virtualScroll);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tt.virtualScroll);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.tt.footerTemplate);\n    }\n  },\n  dependencies: [i2.NgClass, i2.NgIf, i2.NgTemplateOutlet, i2.NgStyle, i1.PrimeTemplate, i4.Scroller, TTBody],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTScrollableView, [{\n    type: Component,\n    args: [{\n      selector: '[ttScrollableView]',\n      template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate || tt.headerTemplate : tt.headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n\n        <p-scroller\n            *ngIf=\"tt.virtualScroll\"\n            #scroller\n            [items]=\"tt.serializedValue\"\n            styleClass=\"p-treetable-scrollable-body\"\n            [style]=\"{ height: tt.scrollHeight !== 'flex' ? tt.scrollHeight : undefined }\"\n            [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\n            [itemSize]=\"tt.virtualScrollItemSize || tt._virtualRowHeight\"\n            [lazy]=\"tt.lazy\"\n            (onLazyLoad)=\"tt.onLazyItemLoad($event)\"\n            [options]=\"tt.virtualScrollOptions\"\n        >\n            <ng-template pTemplate=\"content\" let-items let-scrollerOptions=\"options\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: items, options: scrollerOptions }\"></ng-container>\n            </ng-template>\n            <ng-container *ngIf=\"loaderTemplate\">\n                <ng-template pTemplate=\"loader\" let-scrollerOptions=\"options\">\n                    <ng-container *ngTemplateOutlet=\"loaderTemplate; context: { options: scrollerOptions }\"></ng-container>\n                </ng-template>\n            </ng-container>\n        </p-scroller>\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{ 'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined }\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: serializedValue, options: {} }\"></ng-container>\n            </div>\n        </ng-container>\n\n        <ng-template #buildInItems let-items let-scrollerOptions=\"options\">\n            <table #scrollTable [class]=\"tt.tableStyleClass\" [ngClass]=\"scrollerOptions.contentStyleClass\" [ngStyle]=\"tt.tableStyle\" [style]=\"scrollerOptions.contentStyle\">\n                <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate || tt.bodyTemplate : tt.bodyTemplate\" [serializedNodes]=\"items\" [frozen]=\"frozen\"></tbody>\n            </table>\n            <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n        </ng-template>\n\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate || tt.footerTemplate : tt.footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    columns: [{\n      type: Input,\n      args: ['ttScrollableView']\n    }],\n    frozen: [{\n      type: Input\n    }],\n    scrollHeaderViewChild: [{\n      type: ViewChild,\n      args: ['scrollHeader']\n    }],\n    scrollHeaderBoxViewChild: [{\n      type: ViewChild,\n      args: ['scrollHeaderBox']\n    }],\n    scrollBodyViewChild: [{\n      type: ViewChild,\n      args: ['scrollBody']\n    }],\n    scrollTableViewChild: [{\n      type: ViewChild,\n      args: ['scrollTable']\n    }],\n    scrollLoadingTableViewChild: [{\n      type: ViewChild,\n      args: ['loadingTable']\n    }],\n    scrollFooterViewChild: [{\n      type: ViewChild,\n      args: ['scrollFooter']\n    }],\n    scrollFooterBoxViewChild: [{\n      type: ViewChild,\n      args: ['scrollFooterBox']\n    }],\n    scrollableAlignerViewChild: [{\n      type: ViewChild,\n      args: ['scrollableAligner']\n    }],\n    scroller: [{\n      type: ViewChild,\n      args: ['scroller']\n    }],\n    scrollHeight: [{\n      type: Input\n    }]\n  });\n})();\nclass TTSortableColumn {\n  constructor(tt) {\n    this.tt = tt;\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n        this.updateSortState();\n      });\n    }\n  }\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.updateSortState();\n    }\n  }\n  updateSortState() {\n    this.sorted = this.tt.isSorted(this.field);\n  }\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.updateSortState();\n      this.tt.sort({\n        originalEvent: event,\n        field: this.field\n      });\n      DomHandler.clearSelection();\n    }\n  }\n  onEnterKey(event) {\n    this.onClick(event);\n  }\n  isEnabled() {\n    return this.ttSortableColumnDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\nTTSortableColumn.ɵfac = function TTSortableColumn_Factory(t) {\n  return new (t || TTSortableColumn)(i0.ɵɵdirectiveInject(TreeTable));\n};\nTTSortableColumn.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTSortableColumn,\n  selectors: [[\"\", \"ttSortableColumn\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  hostVars: 6,\n  hostBindings: function TTSortableColumn_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function TTSortableColumn_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown.enter\", function TTSortableColumn_keydown_enter_HostBindingHandler($event) {\n        return ctx.onEnterKey($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"tabindex\", ctx.isEnabled() ? \"0\" : null)(\"role\", \"columnheader\");\n      i0.ɵɵclassProp(\"p-sortable-column\", ctx.isEnabled())(\"p-highlight\", ctx.sorted);\n    }\n  },\n  inputs: {\n    field: [\"ttSortableColumn\", \"field\"],\n    ttSortableColumnDisabled: \"ttSortableColumnDisabled\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSortableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSortableColumn]',\n      host: {\n        class: 'p-element',\n        '[class.p-sortable-column]': 'isEnabled()',\n        '[class.p-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n        '[attr.role]': '\"columnheader\"'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }];\n  }, {\n    field: [{\n      type: Input,\n      args: ['ttSortableColumn']\n    }],\n    ttSortableColumnDisabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onEnterKey: [{\n      type: HostListener,\n      args: ['keydown.enter', ['$event']]\n    }]\n  });\n})();\nclass TTSortIcon {\n  constructor(tt, cd) {\n    this.tt = tt;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n      this.updateSortState();\n      this.cd.markForCheck();\n    });\n  }\n  ngOnInit() {\n    this.updateSortState();\n  }\n  onClick(event) {\n    event.preventDefault();\n  }\n  updateSortState() {\n    if (this.tt.sortMode === 'single') {\n      this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n    } else if (this.tt.sortMode === 'multiple') {\n      let sortMeta = this.tt.getSortMeta(this.field);\n      this.sortOrder = sortMeta ? sortMeta.order : 0;\n    }\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\nTTSortIcon.ɵfac = function TTSortIcon_Factory(t) {\n  return new (t || TTSortIcon)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\nTTSortIcon.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TTSortIcon,\n  selectors: [[\"p-treeTableSortIcon\"]],\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    field: \"field\",\n    ariaLabelDesc: \"ariaLabelDesc\",\n    ariaLabelAsc: \"ariaLabelAsc\"\n  },\n  decls: 1,\n  vars: 5,\n  consts: [[1, \"p-sortable-column-icon\", \"pi\", \"pi-fw\", 3, \"ngClass\"]],\n  template: function TTSortIcon_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"i\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(1, _c29, ctx.sortOrder === 1, ctx.sortOrder === -1, ctx.sortOrder === 0));\n    }\n  },\n  dependencies: [i2.NgClass],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSortIcon, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableSortIcon',\n      template: ` <i class=\"p-sortable-column-icon pi pi-fw\" [ngClass]=\"{ 'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0 }\"></i> `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    field: [{\n      type: Input\n    }],\n    ariaLabelDesc: [{\n      type: Input\n    }],\n    ariaLabelAsc: [{\n      type: Input\n    }]\n  });\n})();\nclass TTResizableColumn {\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\n      this.resizer = document.createElement('span');\n      this.resizer.className = 'p-column-resizer';\n      this.el.nativeElement.appendChild(this.resizer);\n      this.zone.runOutsideAngular(() => {\n        this.resizerMouseDownListener = this.onMouseDown.bind(this);\n        this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n      });\n    }\n  }\n  bindDocumentEvents() {\n    this.zone.runOutsideAngular(() => {\n      this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n      document.addEventListener('mousemove', this.documentMouseMoveListener);\n      this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n      document.addEventListener('mouseup', this.documentMouseUpListener);\n    });\n  }\n  unbindDocumentEvents() {\n    if (this.documentMouseMoveListener) {\n      document.removeEventListener('mousemove', this.documentMouseMoveListener);\n      this.documentMouseMoveListener = null;\n    }\n    if (this.documentMouseUpListener) {\n      document.removeEventListener('mouseup', this.documentMouseUpListener);\n      this.documentMouseUpListener = null;\n    }\n  }\n  onMouseDown(event) {\n    this.tt.onColumnResizeBegin(event);\n    this.bindDocumentEvents();\n  }\n  onDocumentMouseMove(event) {\n    this.tt.onColumnResize(event);\n  }\n  onDocumentMouseUp(event) {\n    this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n    this.unbindDocumentEvents();\n  }\n  isEnabled() {\n    return this.ttResizableColumnDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.resizerMouseDownListener) {\n      this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n    }\n    this.unbindDocumentEvents();\n  }\n}\nTTResizableColumn.ɵfac = function TTResizableColumn_Factory(t) {\n  return new (t || TTResizableColumn)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\nTTResizableColumn.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTResizableColumn,\n  selectors: [[\"\", \"ttResizableColumn\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    ttResizableColumnDisabled: \"ttResizableColumnDisabled\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTResizableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttResizableColumn]',\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    ttResizableColumnDisabled: [{\n      type: Input\n    }]\n  });\n})();\nclass TTReorderableColumn {\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      this.bindEvents();\n    }\n  }\n  bindEvents() {\n    this.zone.runOutsideAngular(() => {\n      this.mouseDownListener = this.onMouseDown.bind(this);\n      this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n      this.dragStartListener = this.onDragStart.bind(this);\n      this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n      this.dragOverListener = this.onDragEnter.bind(this);\n      this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n      this.dragEnterListener = this.onDragEnter.bind(this);\n      this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n      this.dragLeaveListener = this.onDragLeave.bind(this);\n      this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n    });\n  }\n  unbindEvents() {\n    if (this.mouseDownListener) {\n      document.removeEventListener('mousedown', this.mouseDownListener);\n      this.mouseDownListener = null;\n    }\n    if (this.dragOverListener) {\n      document.removeEventListener('dragover', this.dragOverListener);\n      this.dragOverListener = null;\n    }\n    if (this.dragEnterListener) {\n      document.removeEventListener('dragenter', this.dragEnterListener);\n      this.dragEnterListener = null;\n    }\n    if (this.dragEnterListener) {\n      document.removeEventListener('dragenter', this.dragEnterListener);\n      this.dragEnterListener = null;\n    }\n    if (this.dragLeaveListener) {\n      document.removeEventListener('dragleave', this.dragLeaveListener);\n      this.dragLeaveListener = null;\n    }\n  }\n  onMouseDown(event) {\n    if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer')) this.el.nativeElement.draggable = false;else this.el.nativeElement.draggable = true;\n  }\n  onDragStart(event) {\n    this.tt.onColumnDragStart(event, this.el.nativeElement);\n  }\n  onDragOver(event) {\n    event.preventDefault();\n  }\n  onDragEnter(event) {\n    this.tt.onColumnDragEnter(event, this.el.nativeElement);\n  }\n  onDragLeave(event) {\n    this.tt.onColumnDragLeave(event);\n  }\n  onDrop(event) {\n    if (this.isEnabled()) {\n      this.tt.onColumnDrop(event, this.el.nativeElement);\n    }\n  }\n  isEnabled() {\n    return this.ttReorderableColumnDisabled !== true;\n  }\n  ngOnDestroy() {\n    this.unbindEvents();\n  }\n}\nTTReorderableColumn.ɵfac = function TTReorderableColumn_Factory(t) {\n  return new (t || TTReorderableColumn)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\nTTReorderableColumn.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTReorderableColumn,\n  selectors: [[\"\", \"ttReorderableColumn\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  hostBindings: function TTReorderableColumn_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"drop\", function TTReorderableColumn_drop_HostBindingHandler($event) {\n        return ctx.onDrop($event);\n      });\n    }\n  },\n  inputs: {\n    ttReorderableColumnDisabled: \"ttReorderableColumnDisabled\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTReorderableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttReorderableColumn]',\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    ttReorderableColumnDisabled: [{\n      type: Input\n    }],\n    onDrop: [{\n      type: HostListener,\n      args: ['drop', ['$event']]\n    }]\n  });\n})();\nclass TTSelectableRow {\n  constructor(tt, tableService) {\n    this.tt = tt;\n    this.tableService = tableService;\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n        this.selected = this.tt.isSelected(this.rowNode.node);\n      });\n    }\n  }\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.selected = this.tt.isSelected(this.rowNode.node);\n    }\n  }\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowClick({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n    }\n  }\n  onEnterKey(event) {\n    if (event.which === 13) {\n      this.onClick(event);\n    }\n  }\n  onTouchEnd(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowTouchEnd(event);\n    }\n  }\n  isEnabled() {\n    return this.ttSelectableRowDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\nTTSelectableRow.ɵfac = function TTSelectableRow_Factory(t) {\n  return new (t || TTSelectableRow)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService));\n};\nTTSelectableRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTSelectableRow,\n  selectors: [[\"\", \"ttSelectableRow\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  hostVars: 2,\n  hostBindings: function TTSelectableRow_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function TTSelectableRow_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown\", function TTSelectableRow_keydown_HostBindingHandler($event) {\n        return ctx.onEnterKey($event);\n      })(\"touchend\", function TTSelectableRow_touchend_HostBindingHandler($event) {\n        return ctx.onTouchEnd($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"p-highlight\", ctx.selected);\n    }\n  },\n  inputs: {\n    rowNode: [\"ttSelectableRow\", \"rowNode\"],\n    ttSelectableRowDisabled: \"ttSelectableRowDisabled\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSelectableRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSelectableRow]',\n      host: {\n        class: 'p-element',\n        '[class.p-highlight]': 'selected'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }];\n  }, {\n    rowNode: [{\n      type: Input,\n      args: ['ttSelectableRow']\n    }],\n    ttSelectableRowDisabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onEnterKey: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }],\n    onTouchEnd: [{\n      type: HostListener,\n      args: ['touchend', ['$event']]\n    }]\n  });\n})();\nclass TTSelectableRowDblClick {\n  constructor(tt, tableService) {\n    this.tt = tt;\n    this.tableService = tableService;\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n        this.selected = this.tt.isSelected(this.rowNode.node);\n      });\n    }\n  }\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.selected = this.tt.isSelected(this.rowNode.node);\n    }\n  }\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowClick({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n    }\n  }\n  isEnabled() {\n    return this.ttSelectableRowDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\nTTSelectableRowDblClick.ɵfac = function TTSelectableRowDblClick_Factory(t) {\n  return new (t || TTSelectableRowDblClick)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService));\n};\nTTSelectableRowDblClick.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTSelectableRowDblClick,\n  selectors: [[\"\", \"ttSelectableRowDblClick\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  hostVars: 2,\n  hostBindings: function TTSelectableRowDblClick_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"dblclick\", function TTSelectableRowDblClick_dblclick_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"p-highlight\", ctx.selected);\n    }\n  },\n  inputs: {\n    rowNode: [\"ttSelectableRowDblClick\", \"rowNode\"],\n    ttSelectableRowDisabled: \"ttSelectableRowDisabled\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSelectableRowDblClick, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSelectableRowDblClick]',\n      host: {\n        class: 'p-element',\n        '[class.p-highlight]': 'selected'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }];\n  }, {\n    rowNode: [{\n      type: Input,\n      args: ['ttSelectableRowDblClick']\n    }],\n    ttSelectableRowDisabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['dblclick', ['$event']]\n    }]\n  });\n})();\nclass TTContextMenuRow {\n  constructor(tt, tableService, el) {\n    this.tt = tt;\n    this.tableService = tableService;\n    this.el = el;\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.contextMenuSource$.subscribe(node => {\n        this.selected = this.tt.equals(this.rowNode.node, node);\n      });\n    }\n  }\n  onContextMenu(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowRightClick({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n      this.el.nativeElement.focus();\n      event.preventDefault();\n    }\n  }\n  isEnabled() {\n    return this.ttContextMenuRowDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\nTTContextMenuRow.ɵfac = function TTContextMenuRow_Factory(t) {\n  return new (t || TTContextMenuRow)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nTTContextMenuRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTContextMenuRow,\n  selectors: [[\"\", \"ttContextMenuRow\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  hostVars: 3,\n  hostBindings: function TTContextMenuRow_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"contextmenu\", function TTContextMenuRow_contextmenu_HostBindingHandler($event) {\n        return ctx.onContextMenu($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"tabindex\", ctx.isEnabled() ? 0 : undefined);\n      i0.ɵɵclassProp(\"p-highlight-contextmenu\", ctx.selected);\n    }\n  },\n  inputs: {\n    rowNode: [\"ttContextMenuRow\", \"rowNode\"],\n    ttContextMenuRowDisabled: \"ttContextMenuRowDisabled\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTContextMenuRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttContextMenuRow]',\n      host: {\n        class: 'p-element',\n        '[class.p-highlight-contextmenu]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    rowNode: [{\n      type: Input,\n      args: ['ttContextMenuRow']\n    }],\n    ttContextMenuRowDisabled: [{\n      type: Input\n    }],\n    onContextMenu: [{\n      type: HostListener,\n      args: ['contextmenu', ['$event']]\n    }]\n  });\n})();\nclass TTCheckbox {\n  constructor(tt, tableService, cd) {\n    this.tt = tt;\n    this.tableService = tableService;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n      this.checked = this.tt.isSelected(this.rowNode.node);\n      this.cd.markForCheck();\n    });\n  }\n  ngOnInit() {\n    this.checked = this.tt.isSelected(this.rowNode.node);\n  }\n  onClick(event) {\n    if (!this.disabled) {\n      this.tt.toggleNodeWithCheckbox({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n    }\n    DomHandler.clearSelection();\n  }\n  onFocus() {\n    this.focused = true;\n  }\n  onBlur() {\n    this.focused = false;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\nTTCheckbox.ɵfac = function TTCheckbox_Factory(t) {\n  return new (t || TTCheckbox)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\nTTCheckbox.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TTCheckbox,\n  selectors: [[\"p-treeTableCheckbox\"]],\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    disabled: \"disabled\",\n    rowNode: [\"value\", \"rowNode\"]\n  },\n  decls: 6,\n  vars: 15,\n  consts: [[1, \"p-checkbox\", \"p-component\", 3, \"ngClass\", \"click\"], [1, \"p-hidden-accessible\"], [\"type\", \"checkbox\", 3, \"checked\", \"focus\", \"blur\"], [\"role\", \"checkbox\", 3, \"ngClass\"], [\"box\", \"\"], [1, \"p-checkbox-icon\", \"pi\", 3, \"ngClass\"]],\n  template: function TTCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"click\", function TTCheckbox_Template_div_click_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"input\", 2);\n      i0.ɵɵlistener(\"focus\", function TTCheckbox_Template_input_focus_2_listener() {\n        return ctx.onFocus();\n      })(\"blur\", function TTCheckbox_Template_input_blur_2_listener() {\n        return ctx.onBlur();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(3, \"div\", 3, 4);\n      i0.ɵɵelement(5, \"span\", 5);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c30, ctx.focused));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"checked\", ctx.checked);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction4(7, _c31, ctx.checked, ctx.focused, ctx.rowNode.node.partialSelected, ctx.disabled));\n      i0.ɵɵattribute(\"aria-checked\", ctx.checked);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(12, _c32, ctx.checked, ctx.rowNode.node.partialSelected));\n    }\n  },\n  dependencies: [i2.NgClass],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableCheckbox',\n      template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused }\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-indeterminate': rowNode.node.partialSelected, 'p-disabled': disabled }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon pi\" [ngClass]=\"{ 'pi-check': checked, 'pi-minus': rowNode.node.partialSelected }\"></span>\n            </div>\n        </div>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    disabled: [{\n      type: Input\n    }],\n    rowNode: [{\n      type: Input,\n      args: ['value']\n    }]\n  });\n})();\nclass TTHeaderCheckbox {\n  constructor(tt, tableService, cd) {\n    this.tt = tt;\n    this.tableService = tableService;\n    this.cd = cd;\n    this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n      this.checked = this.updateCheckedState();\n    });\n    this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n      this.checked = this.updateCheckedState();\n    });\n  }\n  ngOnInit() {\n    this.checked = this.updateCheckedState();\n  }\n  onClick(event, checked) {\n    if (this.tt.value && this.tt.value.length > 0) {\n      this.tt.toggleNodesWithCheckbox(event, !checked);\n    }\n    DomHandler.clearSelection();\n  }\n  onFocus() {\n    this.focused = true;\n  }\n  onBlur() {\n    this.focused = false;\n  }\n  ngOnDestroy() {\n    if (this.selectionChangeSubscription) {\n      this.selectionChangeSubscription.unsubscribe();\n    }\n    if (this.valueChangeSubscription) {\n      this.valueChangeSubscription.unsubscribe();\n    }\n  }\n  updateCheckedState() {\n    this.cd.markForCheck();\n    let checked;\n    const data = this.tt.filteredNodes || this.tt.value;\n    if (data) {\n      for (let node of data) {\n        if (this.tt.isSelected(node)) {\n          checked = true;\n        } else {\n          checked = false;\n          break;\n        }\n      }\n    } else {\n      checked = false;\n    }\n    return checked;\n  }\n}\nTTHeaderCheckbox.ɵfac = function TTHeaderCheckbox_Factory(t) {\n  return new (t || TTHeaderCheckbox)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\nTTHeaderCheckbox.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TTHeaderCheckbox,\n  selectors: [[\"p-treeTableHeaderCheckbox\"]],\n  viewQuery: function TTHeaderCheckbox_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c33, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.boxViewChild = _t.first);\n    }\n  },\n  hostAttrs: [1, \"p-element\"],\n  decls: 7,\n  vars: 14,\n  consts: [[1, \"p-checkbox\", \"p-component\", 3, \"ngClass\", \"click\"], [1, \"p-hidden-accessible\"], [\"type\", \"checkbox\", 3, \"checked\", \"disabled\", \"focus\", \"blur\"], [\"cb\", \"\"], [\"role\", \"checkbox\", 3, \"ngClass\"], [\"box\", \"\"], [1, \"p-checkbox-icon\", 3, \"ngClass\"]],\n  template: function TTHeaderCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r2 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"click\", function TTHeaderCheckbox_Template_div_click_0_listener($event) {\n        i0.ɵɵrestoreView(_r2);\n        const _r0 = i0.ɵɵreference(3);\n        return i0.ɵɵresetView(ctx.onClick($event, _r0.checked));\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"input\", 2, 3);\n      i0.ɵɵlistener(\"focus\", function TTHeaderCheckbox_Template_input_focus_2_listener() {\n        return ctx.onFocus();\n      })(\"blur\", function TTHeaderCheckbox_Template_input_blur_2_listener() {\n        return ctx.onBlur();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"div\", 4, 5);\n      i0.ɵɵelement(6, \"span\", 6);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(6, _c30, ctx.focused));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"checked\", ctx.checked)(\"disabled\", !ctx.tt.value || ctx.tt.value.length === 0);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(8, _c34, ctx.checked, ctx.focused, !ctx.tt.value || ctx.tt.value.length === 0));\n      i0.ɵɵattribute(\"aria-checked\", ctx.checked);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(12, _c35, ctx.checked));\n    }\n  },\n  dependencies: [i2.NgClass],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTHeaderCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableHeaderCheckbox',\n      template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused }\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value || tt.value.length === 0\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-disabled': !tt.value || tt.value.length === 0 }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{ 'pi pi-check': checked }\"></span>\n            </div>\n        </div>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    boxViewChild: [{\n      type: ViewChild,\n      args: ['box']\n    }]\n  });\n})();\nclass TTEditableColumn {\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n    }\n  }\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.tt.editingCellClick = true;\n      if (this.tt.editingCell) {\n        if (this.tt.editingCell !== this.el.nativeElement) {\n          if (!this.tt.isEditingCellValid()) {\n            return;\n          }\n          DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n          this.openCell();\n        }\n      } else {\n        this.openCell();\n      }\n    }\n  }\n  openCell() {\n    this.tt.updateEditingCell(this.el.nativeElement, this.data, this.field);\n    DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n    this.tt.onEditInit.emit({\n      field: this.field,\n      data: this.data\n    });\n    this.tt.editingCellClick = true;\n    this.zone.runOutsideAngular(() => {\n      setTimeout(() => {\n        let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n        if (focusable) {\n          focusable.focus();\n        }\n      }, 50);\n    });\n  }\n  closeEditingCell() {\n    DomHandler.removeClass(this.tt.editingCell, 'p-checkbox-icon');\n    this.tt.editingCell = null;\n    this.tt.unbindDocumentEditListener();\n  }\n  onKeyDown(event) {\n    if (this.isEnabled()) {\n      //enter\n      if (event.keyCode == 13) {\n        if (this.tt.isEditingCellValid()) {\n          DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n          this.closeEditingCell();\n          this.tt.onEditComplete.emit({\n            field: this.field,\n            data: this.data\n          });\n        }\n        event.preventDefault();\n      }\n      //escape\n      else if (event.keyCode == 27) {\n        if (this.tt.isEditingCellValid()) {\n          DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n          this.closeEditingCell();\n          this.tt.onEditCancel.emit({\n            field: this.field,\n            data: this.data\n          });\n        }\n        event.preventDefault();\n      }\n      //tab\n      else if (event.keyCode == 9) {\n        this.tt.onEditComplete.emit({\n          field: this.field,\n          data: this.data\n        });\n        if (event.shiftKey) this.moveToPreviousCell(event);else this.moveToNextCell(event);\n      }\n    }\n  }\n  findCell(element) {\n    if (element) {\n      let cell = element;\n      while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n        cell = cell.parentElement;\n      }\n      return cell;\n    } else {\n      return null;\n    }\n  }\n  moveToPreviousCell(event) {\n    let currentCell = this.findCell(event.target);\n    let row = currentCell.parentElement;\n    let targetCell = this.findPreviousEditableColumn(currentCell);\n    if (targetCell) {\n      DomHandler.invokeElementMethod(targetCell, 'click');\n      event.preventDefault();\n    }\n  }\n  moveToNextCell(event) {\n    let currentCell = this.findCell(event.target);\n    let row = currentCell.parentElement;\n    let targetCell = this.findNextEditableColumn(currentCell);\n    if (targetCell) {\n      DomHandler.invokeElementMethod(targetCell, 'click');\n      event.preventDefault();\n    }\n  }\n  findPreviousEditableColumn(cell) {\n    let prevCell = cell.previousElementSibling;\n    if (!prevCell) {\n      let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n      if (previousRow) {\n        prevCell = previousRow.lastElementChild;\n      }\n    }\n    if (prevCell) {\n      if (DomHandler.hasClass(prevCell, 'p-editable-column')) return prevCell;else return this.findPreviousEditableColumn(prevCell);\n    } else {\n      return null;\n    }\n  }\n  findNextEditableColumn(cell) {\n    let nextCell = cell.nextElementSibling;\n    if (!nextCell) {\n      let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n      if (nextRow) {\n        nextCell = nextRow.firstElementChild;\n      }\n    }\n    if (nextCell) {\n      if (DomHandler.hasClass(nextCell, 'p-editable-column')) return nextCell;else return this.findNextEditableColumn(nextCell);\n    } else {\n      return null;\n    }\n  }\n  isEnabled() {\n    return this.ttEditableColumnDisabled !== true;\n  }\n}\nTTEditableColumn.ɵfac = function TTEditableColumn_Factory(t) {\n  return new (t || TTEditableColumn)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\nTTEditableColumn.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTEditableColumn,\n  selectors: [[\"\", \"ttEditableColumn\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  hostBindings: function TTEditableColumn_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function TTEditableColumn_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown\", function TTEditableColumn_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  },\n  inputs: {\n    data: [\"ttEditableColumn\", \"data\"],\n    field: [\"ttEditableColumnField\", \"field\"],\n    ttEditableColumnDisabled: \"ttEditableColumnDisabled\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTEditableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttEditableColumn]',\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    data: [{\n      type: Input,\n      args: ['ttEditableColumn']\n    }],\n    field: [{\n      type: Input,\n      args: ['ttEditableColumnField']\n    }],\n    ttEditableColumnDisabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\nclass TreeTableCellEditor {\n  constructor(tt, editableColumn) {\n    this.tt = tt;\n    this.editableColumn = editableColumn;\n  }\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'input':\n          this.inputTemplate = item.template;\n          break;\n        case 'output':\n          this.outputTemplate = item.template;\n          break;\n      }\n    });\n  }\n}\nTreeTableCellEditor.ɵfac = function TreeTableCellEditor_Factory(t) {\n  return new (t || TreeTableCellEditor)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TTEditableColumn));\n};\nTreeTableCellEditor.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeTableCellEditor,\n  selectors: [[\"p-treeTableCellEditor\"]],\n  contentQueries: function TreeTableCellEditor_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n    }\n  },\n  hostAttrs: [1, \"p-element\"],\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [4, \"ngTemplateOutlet\"]],\n  template: function TreeTableCellEditor_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TreeTableCellEditor_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n      i0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_1_Template, 2, 1, \"ng-container\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.tt.editingCell === ctx.editableColumn.el.nativeElement);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tt.editingCell || ctx.tt.editingCell !== ctx.editableColumn.el.nativeElement);\n    }\n  },\n  dependencies: [i2.NgIf, i2.NgTemplateOutlet],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableCellEditor, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableCellEditor',\n      template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TTEditableColumn\n    }];\n  }, {\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\nclass TTRow {\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n  onKeyDown(event) {\n    switch (event.which) {\n      //down arrow\n      case 40:\n        let nextRow = this.el.nativeElement.nextElementSibling;\n        if (nextRow) {\n          nextRow.focus();\n        }\n        event.preventDefault();\n        break;\n      //down arrow\n      case 38:\n        let prevRow = this.el.nativeElement.previousElementSibling;\n        if (prevRow) {\n          prevRow.focus();\n        }\n        event.preventDefault();\n        break;\n      //left arrow\n      case 37:\n        if (this.rowNode.node.expanded) {\n          this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n          this.rowNode.node.expanded = false;\n          this.tt.onNodeCollapse.emit({\n            originalEvent: event,\n            node: this.rowNode.node\n          });\n          this.tt.updateSerializedValue();\n          this.tt.tableService.onUIUpdate(this.tt.value);\n          this.restoreFocus();\n        }\n        break;\n      //right arrow\n      case 39:\n        if (!this.rowNode.node.expanded) {\n          this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n          this.rowNode.node.expanded = true;\n          this.tt.onNodeExpand.emit({\n            originalEvent: event,\n            node: this.rowNode.node\n          });\n          this.tt.updateSerializedValue();\n          this.tt.tableService.onUIUpdate(this.tt.value);\n          this.restoreFocus();\n        }\n        break;\n    }\n  }\n  restoreFocus() {\n    this.zone.runOutsideAngular(() => {\n      setTimeout(() => {\n        let row = DomHandler.findSingle(this.tt.containerViewChild.nativeElement, '.p-treetable-tbody').children[this.tt.toggleRowIndex];\n        if (row) {\n          row.focus();\n        }\n      }, 25);\n    });\n  }\n}\nTTRow.ɵfac = function TTRow_Factory(t) {\n  return new (t || TTRow)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\nTTRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTRow,\n  selectors: [[\"\", \"ttRow\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  hostVars: 1,\n  hostBindings: function TTRow_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function TTRow_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"tabindex\", \"0\");\n    }\n  },\n  inputs: {\n    rowNode: [\"ttRow\", \"rowNode\"]\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttRow]',\n      host: {\n        class: 'p-element',\n        '[attr.tabindex]': '\"0\"'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    rowNode: [{\n      type: Input,\n      args: ['ttRow']\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\nclass TreeTableToggler {\n  constructor(tt) {\n    this.tt = tt;\n  }\n  onClick(event) {\n    this.rowNode.node.expanded = !this.rowNode.node.expanded;\n    if (this.rowNode.node.expanded) {\n      this.tt.onNodeExpand.emit({\n        originalEvent: event,\n        node: this.rowNode.node\n      });\n    } else {\n      this.tt.onNodeCollapse.emit({\n        originalEvent: event,\n        node: this.rowNode.node\n      });\n    }\n    this.tt.updateSerializedValue();\n    this.tt.tableService.onUIUpdate(this.tt.value);\n    event.preventDefault();\n  }\n}\nTreeTableToggler.ɵfac = function TreeTableToggler_Factory(t) {\n  return new (t || TreeTableToggler)(i0.ɵɵdirectiveInject(TreeTable));\n};\nTreeTableToggler.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeTableToggler,\n  selectors: [[\"p-treeTableToggler\"]],\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    rowNode: \"rowNode\"\n  },\n  decls: 2,\n  vars: 5,\n  consts: [[\"type\", \"button\", \"tabindex\", \"-1\", \"pRipple\", \"\", 1, \"p-treetable-toggler\", \"p-link\", 3, \"click\"], [3, \"ngClass\"]],\n  template: function TreeTableToggler_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function TreeTableToggler_Template_button_click_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelement(1, \"i\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"visibility\", ctx.rowNode.node.leaf === false || ctx.rowNode.node.children && ctx.rowNode.node.children.length ? \"visible\" : \"hidden\")(\"margin-left\", ctx.rowNode.level * 16 + \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", ctx.rowNode.node.expanded ? \"pi pi-fw pi-chevron-down\" : \"pi pi-fw pi-chevron-right\");\n    }\n  },\n  dependencies: [i2.NgClass, i5.Ripple],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableToggler, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableToggler',\n      template: `\n        <button\n            type=\"button\"\n            class=\"p-treetable-toggler p-link\"\n            (click)=\"onClick($event)\"\n            tabindex=\"-1\"\n            pRipple\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\"\n            [style.marginLeft]=\"rowNode.level * 16 + 'px'\"\n        >\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\n        </button>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }];\n  }, {\n    rowNode: [{\n      type: Input\n    }]\n  });\n})();\nclass TreeTableModule {}\nTreeTableModule.ɵfac = function TreeTableModule_Factory(t) {\n  return new (t || TreeTableModule)();\n};\nTreeTableModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TreeTableModule\n});\nTreeTableModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule, PaginatorModule, RippleModule, ScrollerModule, SharedModule, ScrollerModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, PaginatorModule, RippleModule, ScrollerModule],\n      exports: [TreeTable, SharedModule, TreeTableToggler, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor, ScrollerModule],\n      declarations: [TreeTable, TreeTableToggler, TTScrollableView, TTBody, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TTBody, TTCheckbox, TTContextMenuRow, TTEditableColumn, TTHeaderCheckbox, TTReorderableColumn, TTResizableColumn, TTRow, TTScrollableView, TTSelectableRow, TTSelectableRowDblClick, TTSortIcon, TTSortableColumn, TreeTable, TreeTableCellEditor, TreeTableModule, TreeTableService, TreeTableToggler };\n//# sourceMappingURL=primeng-treetable.mjs.map","map":{"version":3,"names":["i2","CommonModule","i0","Injectable","EventEmitter","Component","ViewEncapsulation","Input","Output","ViewChild","ContentChildren","Directive","HostListener","ChangeDetectionStrategy","NgModule","i1","PrimeTemplate","SharedModule","DomHandler","i3","PaginatorModule","i5","RippleModule","i4","ScrollerModule","ObjectUtils","Subject","TreeTableService","constructor","sortSource","selectionSource","contextMenuSource","uiUpdateSource","totalRecordsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","uiUpdateSource$","totalRecordsSource$","onSort","sortMeta","next","onSelectionChange","onContextMenu","node","onUIUpdate","value","onTotalRecordsChange","ɵfac","ɵprov","type","TreeTable","el","cd","zone","tableService","filterService","lazy","lazyLoadOnInit","first","pageLinks","alwaysShowPaginator","paginatorPosition","currentPageReportTemplate","showFirstLastIcon","showPageLinks","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","contextMenuSelectionChange","contextMenuSelectionMode","compareSelectionBy","loadingIcon","showLoader","virtualScrollDelay","columnResizeMode","rowTrackBy","index","item","filters","filterDelay","filterMode","onFilter","onNodeExpand","onNodeCollapse","onPage","onLazyLoad","sortFunction","onColResize","onColReorder","onNodeSelect","onNodeUnselect","onContextMenuSelect","onHeaderCheckboxToggle","onEditInit","onEditComplete","onEditCancel","_virtualRowHeight","_value","_totalRecords","_sortOrder","selectionKeys","virtualRowHeight","val","console","warn","ngOnInit","virtualScroll","emit","createLazyLoadMetadata","initialized","ngAfterContentInit","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","paginatorDropdownItemTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","ngOnChanges","simpleChange","currentValue","totalRecords","length","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","updateSerializedValue","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","serializedValue","paginator","serializePageNodes","serializeNodes","filteredNodes","parent","nodes","level","visible","rowNode","expanded","push","children","data","i","rows","dataKey","Array","isArray","String","resolveFieldData","onPageChange","event","scrollable","resetScrollTop","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","sortNodes","customSort","mode","node1","node2","value1","value2","result","localeCompare","undefined","numeric","sortMultipleNodes","multisortmeta","multisortField","isEmpty","isSorted","sorted","globalFilter","forceUpdate","detectChanges","onLazyItemLoad","last","scrollToVirtualIndex","scrollTo","top","scrollableViewChild","scrollableFrozenViewChild","options","getBlockableElement","nativeElement","onColumnResizeBegin","containerLeft","getOffset","containerViewChild","left","lastResizerHelperX","pageX","scrollLeft","preventDefault","onColumnResize","addClass","resizeHelperViewChild","style","height","offsetHeight","display","onColumnResizeEnd","column","delta","offsetLeft","columnWidth","offsetWidth","newColumnWidth","minWidth","parseInt","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","scrollableBody","scrollableHeader","scrollableFooter","scrollableBodyTableWidth","scrollableHeaderTableWidth","isContainerInViewport","setWidth","container","table","calculateScrollbarWidth","tableViewChild","containerWidth","element","removeClass","parentElement","hasClass","colGroup","nodeName","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","reorderableColumns","containerOffset","dropHeaderOffset","targetLeft","targetTop","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","dragIndex","indexWithinGroup","dropIndex","allowDrop","reorderArray","columns","draggable","handleRowClick","targetNode","target","selectionMode","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex","findIndexInSelection","filter","isMultipleSelectionMode","rowIndex","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","toggleNodeWithCheckbox","propagateSelectionDown","propagateSelectionUp","toggleNodesWithCheckbox","check","slice","checked","select","selectedChildCount","childPartialSelected","child","partialSelected","equals","matchMode","filterTimeout","clearTimeout","isFilterBlank","setTimeout","filterGlobal","trim","globalFilterFieldsArray","globalFilterFields","Error","isStrictMode","isValueChanged","copyNode","localMatch","globalMatch","paramsWithoutNode","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","filterConstraint","findFilteredNodes","isFilterMatched","j","copyNodeForGlobal","matches","filteredValue","matched","childNodes","childNode","copyChildNode","dataFieldValue","filterLocale","isNodeLeaf","leaf","empty","reset","updateEditingCell","cell","editingCell","editingCellData","editingCellField","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","unbindDocumentEditListener","document","addEventListener","removeEventListener","ngOnDestroy","ElementRef","ChangeDetectorRef","NgZone","FilterService","ɵcmp","NgClass","NgIf","NgTemplateOutlet","NgStyle","Paginator","TTScrollableView","TTBody","args","selector","providers","encapsulation","None","host","class","styles","styleClass","tableStyle","tableStyleClass","autoLayout","rowsPerPageOptions","paginatorDropdownAppendTo","showCurrentPageReport","showJumpToPageDropdown","rowHover","loading","scrollHeight","virtualScrollItemSize","virtualScrollOptions","frozenWidth","frozenColumns","resizableColumns","tt","treeTableService","subscription","subscribe","getScrollerOption","option","scrollerOptions","getRowIndex","getItemOptions","unsubscribe","NgForOf","frozen","serializedNodes","_scrollHeight","includes","log","ngAfterViewInit","frozenView","previousElementSibling","frozenSiblingBody","scrollBarWidth","scrollHeaderBoxViewChild","paddingRight","scrollFooterBoxViewChild","scrollableAlignerViewChild","calculateScrollbarHeight","bindEvents","runOutsideAngular","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","scroller","getElementRef","scrollBodyViewChild","unbindEvents","preventBodyScrollPropagation","marginLeft","scrollTop","scrollToIndex","Scroller","scrollTableViewChild","scrollLoadingTableViewChild","TTSortableColumn","isEnabled","updateSortState","onClick","clearSelection","onEnterKey","ttSortableColumnDisabled","ɵdir","TTSortIcon","markForCheck","changeDetection","OnPush","ariaLabelDesc","ariaLabelAsc","TTResizableColumn","resizer","createElement","className","appendChild","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","ttResizableColumnDisabled","TTReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","ttReorderableColumnDisabled","TTSelectableRow","which","onTouchEnd","ttSelectableRowDisabled","TTSelectableRowDblClick","TTContextMenuRow","focus","ttContextMenuRowDisabled","TTCheckbox","disabled","onFocus","focused","onBlur","TTHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","boxViewChild","TTEditableColumn","openCell","focusable","closeEditingCell","onKeyDown","keyCode","shiftKey","moveToPreviousCell","moveToNextCell","findCell","currentCell","row","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","nextRow","firstElementChild","ttEditableColumnDisabled","TreeTableCellEditor","editableColumn","inputTemplate","outputTemplate","TTRow","prevRow","toggleRowIndex","restoreFocus","TreeTableToggler","Ripple","TreeTableModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["E:/OneDrive - fiuni.edu.py/Desarrollo/Angular/inventario-farmacia/node_modules/primeng/fesm2020/primeng-treetable.mjs"],"sourcesContent":["import * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ViewEncapsulation, Input, Output, ViewChild, ContentChildren, Directive, HostListener, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i1 from 'primeng/api';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport * as i3 from 'primeng/paginator';\nimport { PaginatorModule } from 'primeng/paginator';\nimport * as i5 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport * as i4 from 'primeng/scroller';\nimport { ScrollerModule } from 'primeng/scroller';\nimport { ObjectUtils } from 'primeng/utils';\nimport { Subject } from 'rxjs';\n\nclass TreeTableService {\n    constructor() {\n        this.sortSource = new Subject();\n        this.selectionSource = new Subject();\n        this.contextMenuSource = new Subject();\n        this.uiUpdateSource = new Subject();\n        this.totalRecordsSource = new Subject();\n        this.sortSource$ = this.sortSource.asObservable();\n        this.selectionSource$ = this.selectionSource.asObservable();\n        this.contextMenuSource$ = this.contextMenuSource.asObservable();\n        this.uiUpdateSource$ = this.uiUpdateSource.asObservable();\n        this.totalRecordsSource$ = this.totalRecordsSource.asObservable();\n    }\n    onSort(sortMeta) {\n        this.sortSource.next(sortMeta);\n    }\n    onSelectionChange() {\n        this.selectionSource.next(null);\n    }\n    onContextMenu(node) {\n        this.contextMenuSource.next(node);\n    }\n    onUIUpdate(value) {\n        this.uiUpdateSource.next(value);\n    }\n    onTotalRecordsChange(value) {\n        this.totalRecordsSource.next(value);\n    }\n}\nTreeTableService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TreeTableService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nTreeTableService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TreeTableService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TreeTableService, decorators: [{\n            type: Injectable\n        }] });\nclass TreeTable {\n    constructor(el, cd, zone, tableService, filterService) {\n        this.el = el;\n        this.cd = cd;\n        this.zone = zone;\n        this.tableService = tableService;\n        this.filterService = filterService;\n        this.lazy = false;\n        this.lazyLoadOnInit = true;\n        this.first = 0;\n        this.pageLinks = 5;\n        this.alwaysShowPaginator = true;\n        this.paginatorPosition = 'bottom';\n        this.currentPageReportTemplate = '{currentPage} of {totalPages}';\n        this.showFirstLastIcon = true;\n        this.showPageLinks = true;\n        this.defaultSortOrder = 1;\n        this.sortMode = 'single';\n        this.resetPageOnSort = true;\n        this.selectionChange = new EventEmitter();\n        this.contextMenuSelectionChange = new EventEmitter();\n        this.contextMenuSelectionMode = 'separate';\n        this.compareSelectionBy = 'deepEquals';\n        this.loadingIcon = 'pi pi-spinner';\n        this.showLoader = true;\n        this.virtualScrollDelay = 150;\n        this.columnResizeMode = 'fit';\n        this.rowTrackBy = (index, item) => item;\n        this.filters = {};\n        this.filterDelay = 300;\n        this.filterMode = 'lenient';\n        this.onFilter = new EventEmitter();\n        this.onNodeExpand = new EventEmitter();\n        this.onNodeCollapse = new EventEmitter();\n        this.onPage = new EventEmitter();\n        this.onSort = new EventEmitter();\n        this.onLazyLoad = new EventEmitter();\n        this.sortFunction = new EventEmitter();\n        this.onColResize = new EventEmitter();\n        this.onColReorder = new EventEmitter();\n        this.onNodeSelect = new EventEmitter();\n        this.onNodeUnselect = new EventEmitter();\n        this.onContextMenuSelect = new EventEmitter();\n        this.onHeaderCheckboxToggle = new EventEmitter();\n        this.onEditInit = new EventEmitter();\n        this.onEditComplete = new EventEmitter();\n        this.onEditCancel = new EventEmitter();\n        /* @deprecated */\n        this._virtualRowHeight = 28;\n        this._value = [];\n        this._totalRecords = 0;\n        this._sortOrder = 1;\n        this.selectionKeys = {};\n    }\n    get virtualRowHeight() {\n        return this._virtualRowHeight;\n    }\n    set virtualRowHeight(val) {\n        this._virtualRowHeight = val;\n        console.warn('The virtualRowHeight property is deprecated, use virtualScrollItemSize property instead.');\n    }\n    ngOnInit() {\n        if (this.lazy && this.lazyLoadOnInit && !this.virtualScroll) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.initialized = true;\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                    break;\n                case 'header':\n                    this.headerTemplate = item.template;\n                    break;\n                case 'body':\n                    this.bodyTemplate = item.template;\n                    break;\n                case 'loadingbody':\n                    this.loadingBodyTemplate = item.template;\n                    break;\n                case 'footer':\n                    this.footerTemplate = item.template;\n                    break;\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                    break;\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                    break;\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                    break;\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                    break;\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                    break;\n                case 'paginatordropdownitem':\n                    this.paginatorDropdownItemTemplate = item.template;\n                    break;\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                    break;\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                    break;\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                    break;\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                    break;\n            }\n        });\n    }\n    ngOnChanges(simpleChange) {\n        if (simpleChange.value) {\n            this._value = simpleChange.value.currentValue;\n            if (!this.lazy) {\n                this.totalRecords = this._value ? this._value.length : 0;\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter())\n                    //sort already filters\n                    this._filter();\n            }\n            this.updateSerializedValue();\n            this.tableService.onUIUpdate(this.value);\n        }\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        }\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n    get value() {\n        return this._value;\n    }\n    set value(val) {\n        this._value = val;\n    }\n    updateSerializedValue() {\n        this.serializedValue = [];\n        if (this.paginator)\n            this.serializePageNodes();\n        else\n            this.serializeNodes(null, this.filteredNodes || this.value, 0, true);\n    }\n    serializeNodes(parent, nodes, level, visible) {\n        if (nodes && nodes.length) {\n            for (let node of nodes) {\n                node.parent = parent;\n                const rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n                if (rowNode.visible && node.expanded) {\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n                }\n            }\n        }\n    }\n    serializePageNodes() {\n        let data = this.filteredNodes || this.value;\n        this.serializedValue = [];\n        if (data && data.length) {\n            const first = this.lazy ? 0 : this.first;\n            for (let i = first; i < first + this.rows; i++) {\n                let node = data[i];\n                if (node) {\n                    this.serializedValue.push({\n                        node: node,\n                        parent: null,\n                        level: 0,\n                        visible: true\n                    });\n                    this.serializeNodes(node, node.children, 1, true);\n                }\n            }\n        }\n    }\n    get totalRecords() {\n        return this._totalRecords;\n    }\n    set totalRecords(val) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n    get sortField() {\n        return this._sortField;\n    }\n    set sortField(val) {\n        this._sortField = val;\n    }\n    get sortOrder() {\n        return this._sortOrder;\n    }\n    set sortOrder(val) {\n        this._sortOrder = val;\n    }\n    get multiSortMeta() {\n        return this._multiSortMeta;\n    }\n    set multiSortMeta(val) {\n        this._multiSortMeta = val;\n    }\n    get selection() {\n        return this._selection;\n    }\n    set selection(val) {\n        this._selection = val;\n    }\n    updateSelectionKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for (let node of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n            }\n        }\n    }\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n        if (this.lazy)\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        else\n            this.serializePageNodes();\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n        this.tableService.onUIUpdate(this.value);\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n    sort(event) {\n        let originalEvent = event.originalEvent;\n        if (this.sortMode === 'single') {\n            this._sortOrder = this.sortField === event.field ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n            if (this.resetPageOnSort && this.scrollable) {\n                this.resetScrollTop();\n            }\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }];\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n            this.sortMultiple();\n        }\n    }\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortNodes(this.value);\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            let sortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n            this.updateSerializedValue();\n        }\n    }\n    sortNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: nodes,\n                mode: this.sortMode,\n                field: this.sortField,\n                order: this.sortOrder\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n                let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n                let result = null;\n                if (value1 == null && value2 != null)\n                    result = -1;\n                else if (value1 != null && value2 == null)\n                    result = 1;\n                else if (value1 == null && value2 == null)\n                    result = 0;\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\n                    result = value1.localeCompare(value2, undefined, { numeric: true });\n                else\n                    result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;\n                return this.sortOrder * result;\n            });\n        }\n        for (let node of nodes) {\n            this.sortNodes(node.children);\n        }\n    }\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortMultipleNodes(this.value);\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.updateSerializedValue();\n            this.tableService.onSort(this.multiSortMeta);\n        }\n    }\n    sortMultipleNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: this.value,\n                mode: this.sortMode,\n                multiSortMeta: this.multiSortMeta\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                return this.multisortField(node1, node2, this.multiSortMeta, 0);\n            });\n        }\n        for (let node of nodes) {\n            this.sortMultipleNodes(node.children);\n        }\n    }\n    multisortField(node1, node2, multiSortMeta, index) {\n        if (ObjectUtils.isEmpty(this.multiSortMeta) || ObjectUtils.isEmpty(multiSortMeta[index])) {\n            return 0;\n        }\n        let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n        let result = null;\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && value1 != value2) {\n                return multiSortMeta[index].order * value1.localeCompare(value2, undefined, { numeric: true });\n            }\n        }\n        else {\n            result = value1 < value2 ? -1 : 1;\n        }\n        if (value1 == value2) {\n            return multiSortMeta.length - 1 > index ? this.multisortField(node1, node2, multiSortMeta, index + 1) : 0;\n        }\n        return multiSortMeta[index].order * result;\n    }\n    getSortMeta(field) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n        return null;\n    }\n    isSorted(field) {\n        if (this.sortMode === 'single') {\n            return this.sortField && this.sortField === field;\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta) {\n                for (let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field) {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n    createLazyLoadMetadata() {\n        return {\n            first: this.first,\n            rows: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta,\n            forceUpdate: () => this.cd.detectChanges()\n        };\n    }\n    onLazyItemLoad(event) {\n        this.onLazyLoad.emit({\n            ...this.createLazyLoadMetadata(),\n            ...event,\n            rows: event.last - event.first\n        });\n    }\n    resetScrollTop() {\n        if (this.virtualScroll)\n            this.scrollToVirtualIndex(0);\n        else\n            this.scrollTo({ top: 0 });\n    }\n    scrollToVirtualIndex(index) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollToVirtualIndex(index);\n        }\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\n        }\n    }\n    scrollTo(options) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollTo(options);\n        }\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollTo(options);\n        }\n    }\n    isEmpty() {\n        let data = this.filteredNodes || this.value;\n        return data == null || data.length == 0;\n    }\n    getBlockableElement() {\n        return this.el.nativeElement.children[0];\n    }\n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft;\n        event.preventDefault();\n    }\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft + 'px';\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let newColumnWidth = columnWidth + delta;\n        let minWidth = column.style.minWidth || 15;\n        if (columnWidth + delta > parseInt(minWidth)) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (this.scrollable) {\n                    let scrollableView = this.findParentScrollableView(column);\n                    let scrollableBody = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport');\n                    let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-header');\n                    let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-footer');\n                    let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport table');\n                    let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                    let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                    scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n                    scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n                    if (scrollableFooterTable) {\n                        scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\n                    }\n                    let resizeColumnIndex = DomHandler.index(column);\n                    const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n                    const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n                    const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n                    let setWidth = (container, table, width, isContainerInViewport) => {\n                        if (container && table) {\n                            container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto';\n                            table.style.width = width + 'px';\n                        }\n                    };\n                    setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n                    setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n                    setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                    column.style.width = newColumnWidth + 'px';\n                    let containerWidth = this.tableViewChild.nativeElement.style.width;\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                }\n            }\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n        }\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n    }\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'p-treetable-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw 'Scrollable tables require a colgroup to support resizable columns';\n            }\n        }\n    }\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b'); // For firefox\n    }\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n            if (this.draggedColumn != dropHeader) {\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n                    this.dropPosition = -1;\n                }\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n            let allowDrop = dragIndex != dropIndex;\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n            if (allowDrop && dropIndex < dragIndex && this.dropPosition === 1) {\n                dropIndex = dropIndex + 1;\n            }\n            if (allowDrop && dropIndex > dragIndex && this.dropPosition === -1) {\n                dropIndex = dropIndex - 1;\n            }\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n            }\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n    handleRowClick(event) {\n        let targetNode = event.originalEvent.target.nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || DomHandler.hasClass(event.originalEvent.target, 'p-clickable')) {\n            return;\n        }\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            let rowNode = event.rowNode;\n            let selected = this.isSelected(rowNode.node);\n            let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n            if (metaSelection) {\n                let metaKey = event.originalEvent.metaKey || event.originalEvent.ctrlKey;\n                if (selected && metaKey) {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(null);\n                    }\n                    else {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(rowNode.node);\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        if (metaKey) {\n                            this._selection = this.selection || [];\n                        }\n                        else {\n                            this._selection = [];\n                            this.selectionKeys = {};\n                        }\n                        this._selection = [...this.selection, rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                }\n            }\n            else {\n                if (this.selectionMode === 'single') {\n                    if (selected) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                    }\n                    else {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n                else if (this.selectionMode === 'multiple') {\n                    if (selected) {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    else {\n                        this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n            }\n            this.tableService.onSelectionChange();\n        }\n        this.rowTouched = false;\n    }\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const node = event.rowNode.node;\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = node;\n                this.contextMenuSelectionChange.emit(node);\n                this.onContextMenuSelect.emit({ originalEvent: event.originalEvent, node: node });\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(node);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(node);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = node;\n                        this.selectionChange.emit(node);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [node];\n                        this.selectionChange.emit(this.selection);\n                    }\n                    if (dataKeyValue) {\n                        this.selectionKeys[dataKeyValue] = 1;\n                    }\n                }\n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({ originalEvent: event.originalEvent, node: node });\n            }\n        }\n    }\n    toggleNodeWithCheckbox(event) {\n        this.selection = this.selection || [];\n        this.preventSelectionSetterPropagation = true;\n        let node = event.rowNode.node;\n        let selected = this.isSelected(node);\n        if (selected) {\n            this.propagateSelectionDown(node, false);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, false);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({ originalEvent: event, node: node });\n        }\n        else {\n            this.propagateSelectionDown(node, true);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, true);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({ originalEvent: event, node: node });\n        }\n        this.tableService.onSelectionChange();\n    }\n    toggleNodesWithCheckbox(event, check) {\n        let data = this.filteredNodes || this.value;\n        this._selection = check && data ? data.slice() : [];\n        if (check) {\n            if (data && data.length) {\n                for (let node of data) {\n                    this.propagateSelectionDown(node, true);\n                }\n            }\n        }\n        else {\n            this._selection = [];\n            this.selectionKeys = {};\n        }\n        this.preventSelectionSetterPropagation = true;\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({ originalEvent: event, checked: check });\n    }\n    propagateSelectionUp(node, select) {\n        if (node.children && node.children.length) {\n            let selectedChildCount = 0;\n            let childPartialSelected = false;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n            for (let child of node.children) {\n                if (this.isSelected(child))\n                    selectedChildCount++;\n                else if (child.partialSelected)\n                    childPartialSelected = true;\n            }\n            if (select && selectedChildCount == node.children.length) {\n                this._selection = [...(this.selection || []), node];\n                node.partialSelected = false;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n            }\n            else {\n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this._selection = this.selection.filter((val, i) => i != index);\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                }\n                if (childPartialSelected || (selectedChildCount > 0 && selectedChildCount != node.children.length))\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n        }\n        let parent = node.parent;\n        if (parent) {\n            this.propagateSelectionUp(parent, select);\n        }\n    }\n    propagateSelectionDown(node, select) {\n        let index = this.findIndexInSelection(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n        if (select && index == -1) {\n            this._selection = [...(this.selection || []), node];\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n        else if (!select && index > -1) {\n            this._selection = this.selection.filter((val, i) => i != index);\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n        node.partialSelected = false;\n        if (node.children && node.children.length) {\n            for (let child of node.children) {\n                this.propagateSelectionDown(child, select);\n            }\n        }\n    }\n    isSelected(node) {\n        if (node && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n            }\n            else {\n                if (Array.isArray(this.selection))\n                    return this.findIndexInSelection(node) > -1;\n                else\n                    return this.equals(node, this.selection);\n            }\n        }\n        return false;\n    }\n    findIndexInSelection(node) {\n        let index = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(node, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    }\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n    equals(node1, node2) {\n        return this.compareSelectionBy === 'equals' ? node1 === node2 : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n    }\n    filter(value, field, matchMode) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        }\n        else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n    }\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n    isFilterBlank(filter) {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (Array.isArray(filter) && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n    _filter() {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n            if (!this.hasFilter()) {\n                this.filteredNodes = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields || this.columns;\n                }\n                this.filteredNodes = [];\n                const isStrictMode = this.filterMode === 'strict';\n                let isValueChanged = false;\n                for (let node of this.value) {\n                    let copyNode = { ...node };\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let paramsWithoutNode;\n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let filterConstraint = this.filterService.filters[filterMatchMode];\n                            paramsWithoutNode = { filterField, filterValue, filterConstraint, isStrictMode };\n                            if ((isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                                (!isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                                localMatch = false;\n                            }\n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for (let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let copyNodeForGlobal = { ...copyNode };\n                            let filterField = globalFilterFieldsArray[j].field || globalFilterFieldsArray[j];\n                            let filterValue = this.filters['global'].value;\n                            let filterConstraint = this.filterService.filters[this.filters['global'].matchMode];\n                            paramsWithoutNode = { filterField, filterValue, filterConstraint, isStrictMode };\n                            if ((isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode))) ||\n                                (!isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode)))) {\n                                globalMatch = true;\n                                copyNode = copyNodeForGlobal;\n                            }\n                        }\n                    }\n                    let matches = localMatch;\n                    if (this.filters['global']) {\n                        matches = localMatch && globalMatch;\n                    }\n                    if (matches) {\n                        this.filteredNodes.push(copyNode);\n                    }\n                    isValueChanged = isValueChanged || !localMatch || globalMatch || (localMatch && this.filteredNodes.length > 0) || (!globalMatch && this.filteredNodes.length === 0);\n                }\n                if (!isValueChanged) {\n                    this.filteredNodes = null;\n                }\n                if (this.paginator) {\n                    this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n        this.first = 0;\n        const filteredValue = this.filteredNodes || this.value;\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: filteredValue\n        });\n        this.tableService.onUIUpdate(filteredValue);\n        this.updateSerializedValue();\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = { ...childNode };\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n            if (matched) {\n                return true;\n            }\n        }\n    }\n    isFilterMatched(node, { filterField, filterValue, filterConstraint, isStrictMode }) {\n        let matched = false;\n        let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n        if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n            matched = true;\n        }\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, { filterField, filterValue, filterConstraint, isStrictMode }) || matched;\n        }\n        return matched;\n    }\n    isNodeLeaf(node) {\n        return node.leaf === false ? false : !(node.children && node.children.length);\n    }\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n        return !empty;\n    }\n    reset() {\n        this._sortField = null;\n        this._sortOrder = 1;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n        this.filteredNodes = null;\n        this.filters = {};\n        this.first = 0;\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = this._value ? this._value.length : 0;\n        }\n    }\n    updateEditingCell(cell, data, field) {\n        this.editingCell = cell;\n        this.editingCellData = data;\n        this.editingCellField = field;\n        this.bindDocumentEditListener();\n    }\n    isEditingCellValid() {\n        return this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0;\n    }\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'p-cell-editing');\n                    this.editingCell = null;\n                    this.onEditComplete.emit({ field: this.editingCellField, data: this.editingCellData });\n                    this.editingCellField = null;\n                    this.editingCellData = null;\n                    this.unbindDocumentEditListener();\n                }\n                this.editingCellClick = false;\n            };\n            document.addEventListener('click', this.documentEditListener);\n        }\n    }\n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            document.removeEventListener('click', this.documentEditListener);\n            this.documentEditListener = null;\n        }\n    }\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.editingCellField = null;\n        this.editingCellData = null;\n        this.initialized = null;\n    }\n}\nTreeTable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TreeTable, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: TreeTableService }, { token: i1.FilterService }], target: i0.ɵɵFactoryTarget.Component });\nTreeTable.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.1.0\", type: TreeTable, selector: \"p-treeTable\", inputs: { columns: \"columns\", style: \"style\", styleClass: \"styleClass\", tableStyle: \"tableStyle\", tableStyleClass: \"tableStyleClass\", autoLayout: \"autoLayout\", lazy: \"lazy\", lazyLoadOnInit: \"lazyLoadOnInit\", paginator: \"paginator\", rows: \"rows\", first: \"first\", pageLinks: \"pageLinks\", rowsPerPageOptions: \"rowsPerPageOptions\", alwaysShowPaginator: \"alwaysShowPaginator\", paginatorPosition: \"paginatorPosition\", paginatorDropdownAppendTo: \"paginatorDropdownAppendTo\", currentPageReportTemplate: \"currentPageReportTemplate\", showCurrentPageReport: \"showCurrentPageReport\", showJumpToPageDropdown: \"showJumpToPageDropdown\", showFirstLastIcon: \"showFirstLastIcon\", showPageLinks: \"showPageLinks\", defaultSortOrder: \"defaultSortOrder\", sortMode: \"sortMode\", resetPageOnSort: \"resetPageOnSort\", customSort: \"customSort\", selectionMode: \"selectionMode\", contextMenuSelection: \"contextMenuSelection\", contextMenuSelectionMode: \"contextMenuSelectionMode\", dataKey: \"dataKey\", metaKeySelection: \"metaKeySelection\", compareSelectionBy: \"compareSelectionBy\", rowHover: \"rowHover\", loading: \"loading\", loadingIcon: \"loadingIcon\", showLoader: \"showLoader\", scrollable: \"scrollable\", scrollHeight: \"scrollHeight\", virtualScroll: \"virtualScroll\", virtualScrollItemSize: \"virtualScrollItemSize\", virtualScrollOptions: \"virtualScrollOptions\", virtualScrollDelay: \"virtualScrollDelay\", frozenWidth: \"frozenWidth\", frozenColumns: \"frozenColumns\", resizableColumns: \"resizableColumns\", columnResizeMode: \"columnResizeMode\", reorderableColumns: \"reorderableColumns\", contextMenu: \"contextMenu\", rowTrackBy: \"rowTrackBy\", filters: \"filters\", globalFilterFields: \"globalFilterFields\", filterDelay: \"filterDelay\", filterMode: \"filterMode\", filterLocale: \"filterLocale\", virtualRowHeight: \"virtualRowHeight\", value: \"value\", totalRecords: \"totalRecords\", sortField: \"sortField\", sortOrder: \"sortOrder\", multiSortMeta: \"multiSortMeta\", selection: \"selection\" }, outputs: { selectionChange: \"selectionChange\", contextMenuSelectionChange: \"contextMenuSelectionChange\", onFilter: \"onFilter\", onNodeExpand: \"onNodeExpand\", onNodeCollapse: \"onNodeCollapse\", onPage: \"onPage\", onSort: \"onSort\", onLazyLoad: \"onLazyLoad\", sortFunction: \"sortFunction\", onColResize: \"onColResize\", onColReorder: \"onColReorder\", onNodeSelect: \"onNodeSelect\", onNodeUnselect: \"onNodeUnselect\", onContextMenuSelect: \"onContextMenuSelect\", onHeaderCheckboxToggle: \"onHeaderCheckboxToggle\", onEditInit: \"onEditInit\", onEditComplete: \"onEditComplete\", onEditCancel: \"onEditCancel\" }, host: { classAttribute: \"p-element\" }, providers: [TreeTableService], queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], viewQueries: [{ propertyName: \"containerViewChild\", first: true, predicate: [\"container\"], descendants: true }, { propertyName: \"resizeHelperViewChild\", first: true, predicate: [\"resizeHelper\"], descendants: true }, { propertyName: \"reorderIndicatorUpViewChild\", first: true, predicate: [\"reorderIndicatorUp\"], descendants: true }, { propertyName: \"reorderIndicatorDownViewChild\", first: true, predicate: [\"reorderIndicatorDown\"], descendants: true }, { propertyName: \"tableViewChild\", first: true, predicate: [\"table\"], descendants: true }, { propertyName: \"scrollableViewChild\", first: true, predicate: [\"scrollableView\"], descendants: true }, { propertyName: \"scrollableFrozenViewChild\", first: true, predicate: [\"scrollableFrozenView\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n        <div\n            #container\n            [ngStyle]=\"style\"\n            [class]=\"styleClass\"\n            data-scrollselectors=\".p-treetable-scrollable-body\"\n            [ngClass]=\"{\n                'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': rowHover || selectionMode === 'single' || selectionMode === 'multiple',\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': resizableColumns && columnResizeMode === 'fit',\n                'p-treetable-flex-scrollable': scrollable && scrollHeight === 'flex'\n            }\"\n        >\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-top\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n            ></p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n                <div\n                    class=\"p-treetable-scrollable-view p-treetable-frozen-view\"\n                    *ngIf=\"frozenColumns || frozenBodyTemplate\"\n                    #scrollableFrozenView\n                    [ttScrollableView]=\"frozenColumns\"\n                    [frozen]=\"true\"\n                    [ngStyle]=\"{ width: frozenWidth }\"\n                    [scrollHeight]=\"scrollHeight\"\n                ></div>\n                <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{ left: frozenWidth, width: 'calc(100% - ' + frozenWidth + ')' }\"></div>\n            </div>\n\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-bottom\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n            ></p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down p-treetable-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up p-treetable-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `, isInline: true, styles: [\".p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-icon,.p-treetable .p-sortable-column .p-sortable-column-badge{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;overflow:hidden;position:relative}p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}p-treetabletoggler+p-treetablecheckbox+span{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-header,.p-treetable-scrollable-footer{overflow:hidden}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0 none}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0 none}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper,.p-treetable-flex-scrollable .p-treetable-scrollable-view{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-virtual-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-thead>tr>th,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-tbody>tr>td{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-editor-cancel,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-up,.p-treetable-reorder-indicator-down{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}.p-treetable .p-scroller-loading{transform:none!important;min-height:0;position:sticky;top:0;left:0}\\n\"], dependencies: [{ kind: \"directive\", type: i0.forwardRef(function () { return i2.NgClass; }), selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i0.forwardRef(function () { return i2.NgIf; }), selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i0.forwardRef(function () { return i2.NgTemplateOutlet; }), selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i0.forwardRef(function () { return i2.NgStyle; }), selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"component\", type: i0.forwardRef(function () { return i3.Paginator; }), selector: \"p-paginator\", inputs: [\"pageLinkSize\", \"style\", \"styleClass\", \"alwaysShow\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"dropdownScrollHeight\", \"currentPageReportTemplate\", \"showCurrentPageReport\", \"showFirstLastIcon\", \"totalRecords\", \"rows\", \"rowsPerPageOptions\", \"showJumpToPageDropdown\", \"showJumpToPageInput\", \"showPageLinks\", \"dropdownItemTemplate\", \"first\"], outputs: [\"onPageChange\"] }, { kind: \"component\", type: i0.forwardRef(function () { return TTScrollableView; }), selector: \"[ttScrollableView]\", inputs: [\"ttScrollableView\", \"frozen\", \"scrollHeight\"] }, { kind: \"component\", type: i0.forwardRef(function () { return TTBody; }), selector: \"[pTreeTableBody]\", inputs: [\"pTreeTableBody\", \"pTreeTableBodyTemplate\", \"frozen\", \"serializedNodes\", \"scrollerOptions\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TreeTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'p-treeTable', template: `\n        <div\n            #container\n            [ngStyle]=\"style\"\n            [class]=\"styleClass\"\n            data-scrollselectors=\".p-treetable-scrollable-body\"\n            [ngClass]=\"{\n                'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': rowHover || selectionMode === 'single' || selectionMode === 'multiple',\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': resizableColumns && columnResizeMode === 'fit',\n                'p-treetable-flex-scrollable': scrollable && scrollHeight === 'flex'\n            }\"\n        >\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-top\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n            ></p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n                <div\n                    class=\"p-treetable-scrollable-view p-treetable-frozen-view\"\n                    *ngIf=\"frozenColumns || frozenBodyTemplate\"\n                    #scrollableFrozenView\n                    [ttScrollableView]=\"frozenColumns\"\n                    [frozen]=\"true\"\n                    [ngStyle]=\"{ width: frozenWidth }\"\n                    [scrollHeight]=\"scrollHeight\"\n                ></div>\n                <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{ left: frozenWidth, width: 'calc(100% - ' + frozenWidth + ')' }\"></div>\n            </div>\n\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-bottom\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n            ></p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down p-treetable-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up p-treetable-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `, providers: [TreeTableService], encapsulation: ViewEncapsulation.None, host: {\n                        class: 'p-element'\n                    }, styles: [\".p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-icon,.p-treetable .p-sortable-column .p-sortable-column-badge{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;overflow:hidden;position:relative}p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}p-treetabletoggler+p-treetablecheckbox+span{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-header,.p-treetable-scrollable-footer{overflow:hidden}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0 none}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0 none}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper,.p-treetable-flex-scrollable .p-treetable-scrollable-view{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-virtual-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-thead>tr>th,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-tbody>tr>td{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-editor-cancel,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-up,.p-treetable-reorder-indicator-down{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}.p-treetable .p-scroller-loading{transform:none!important;min-height:0;position:sticky;top:0;left:0}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: TreeTableService }, { type: i1.FilterService }]; }, propDecorators: { columns: [{\n                type: Input\n            }], style: [{\n                type: Input\n            }], styleClass: [{\n                type: Input\n            }], tableStyle: [{\n                type: Input\n            }], tableStyleClass: [{\n                type: Input\n            }], autoLayout: [{\n                type: Input\n            }], lazy: [{\n                type: Input\n            }], lazyLoadOnInit: [{\n                type: Input\n            }], paginator: [{\n                type: Input\n            }], rows: [{\n                type: Input\n            }], first: [{\n                type: Input\n            }], pageLinks: [{\n                type: Input\n            }], rowsPerPageOptions: [{\n                type: Input\n            }], alwaysShowPaginator: [{\n                type: Input\n            }], paginatorPosition: [{\n                type: Input\n            }], paginatorDropdownAppendTo: [{\n                type: Input\n            }], currentPageReportTemplate: [{\n                type: Input\n            }], showCurrentPageReport: [{\n                type: Input\n            }], showJumpToPageDropdown: [{\n                type: Input\n            }], showFirstLastIcon: [{\n                type: Input\n            }], showPageLinks: [{\n                type: Input\n            }], defaultSortOrder: [{\n                type: Input\n            }], sortMode: [{\n                type: Input\n            }], resetPageOnSort: [{\n                type: Input\n            }], customSort: [{\n                type: Input\n            }], selectionMode: [{\n                type: Input\n            }], selectionChange: [{\n                type: Output\n            }], contextMenuSelection: [{\n                type: Input\n            }], contextMenuSelectionChange: [{\n                type: Output\n            }], contextMenuSelectionMode: [{\n                type: Input\n            }], dataKey: [{\n                type: Input\n            }], metaKeySelection: [{\n                type: Input\n            }], compareSelectionBy: [{\n                type: Input\n            }], rowHover: [{\n                type: Input\n            }], loading: [{\n                type: Input\n            }], loadingIcon: [{\n                type: Input\n            }], showLoader: [{\n                type: Input\n            }], scrollable: [{\n                type: Input\n            }], scrollHeight: [{\n                type: Input\n            }], virtualScroll: [{\n                type: Input\n            }], virtualScrollItemSize: [{\n                type: Input\n            }], virtualScrollOptions: [{\n                type: Input\n            }], virtualScrollDelay: [{\n                type: Input\n            }], frozenWidth: [{\n                type: Input\n            }], frozenColumns: [{\n                type: Input\n            }], resizableColumns: [{\n                type: Input\n            }], columnResizeMode: [{\n                type: Input\n            }], reorderableColumns: [{\n                type: Input\n            }], contextMenu: [{\n                type: Input\n            }], rowTrackBy: [{\n                type: Input\n            }], filters: [{\n                type: Input\n            }], globalFilterFields: [{\n                type: Input\n            }], filterDelay: [{\n                type: Input\n            }], filterMode: [{\n                type: Input\n            }], filterLocale: [{\n                type: Input\n            }], onFilter: [{\n                type: Output\n            }], onNodeExpand: [{\n                type: Output\n            }], onNodeCollapse: [{\n                type: Output\n            }], onPage: [{\n                type: Output\n            }], onSort: [{\n                type: Output\n            }], onLazyLoad: [{\n                type: Output\n            }], sortFunction: [{\n                type: Output\n            }], onColResize: [{\n                type: Output\n            }], onColReorder: [{\n                type: Output\n            }], onNodeSelect: [{\n                type: Output\n            }], onNodeUnselect: [{\n                type: Output\n            }], onContextMenuSelect: [{\n                type: Output\n            }], onHeaderCheckboxToggle: [{\n                type: Output\n            }], onEditInit: [{\n                type: Output\n            }], onEditComplete: [{\n                type: Output\n            }], onEditCancel: [{\n                type: Output\n            }], containerViewChild: [{\n                type: ViewChild,\n                args: ['container']\n            }], resizeHelperViewChild: [{\n                type: ViewChild,\n                args: ['resizeHelper']\n            }], reorderIndicatorUpViewChild: [{\n                type: ViewChild,\n                args: ['reorderIndicatorUp']\n            }], reorderIndicatorDownViewChild: [{\n                type: ViewChild,\n                args: ['reorderIndicatorDown']\n            }], tableViewChild: [{\n                type: ViewChild,\n                args: ['table']\n            }], scrollableViewChild: [{\n                type: ViewChild,\n                args: ['scrollableView']\n            }], scrollableFrozenViewChild: [{\n                type: ViewChild,\n                args: ['scrollableFrozenView']\n            }], templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }], virtualRowHeight: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], totalRecords: [{\n                type: Input\n            }], sortField: [{\n                type: Input\n            }], sortOrder: [{\n                type: Input\n            }], multiSortMeta: [{\n                type: Input\n            }], selection: [{\n                type: Input\n            }] } });\nclass TTBody {\n    constructor(tt, treeTableService, cd) {\n        this.tt = tt;\n        this.treeTableService = treeTableService;\n        this.cd = cd;\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            if (this.tt.virtualScroll) {\n                this.cd.detectChanges();\n            }\n        });\n    }\n    getScrollerOption(option, options) {\n        if (this.tt.virtualScroll) {\n            options = options || this.scrollerOptions;\n            return options ? options[option] : null;\n        }\n        return null;\n    }\n    getRowIndex(rowIndex) {\n        const getItemOptions = this.getScrollerOption('getItemOptions');\n        return getItemOptions ? getItemOptions(rowIndex).index : rowIndex;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTBody.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTBody, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTTBody.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.1.0\", type: TTBody, selector: \"[pTreeTableBody]\", inputs: { columns: [\"pTreeTableBody\", \"columns\"], template: [\"pTreeTableBodyTemplate\", \"template\"], frozen: \"frozen\", serializedNodes: \"serializedNodes\", scrollerOptions: \"scrollerOptions\" }, host: { classAttribute: \"p-element\" }, ngImport: i0, template: `\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"serializedNodes || tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n            <ng-container *ngIf=\"serializedNode.visible\">\n                <ng-container *ngTemplateOutlet=\"template; context: { $implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns }\"></ng-container>\n            </ng-container>\n        </ng-template>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: { $implicit: columns, frozen: frozen }\"></ng-container>\n        </ng-container>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTBody, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[pTreeTableBody]',\n                    template: `\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"serializedNodes || tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n            <ng-container *ngIf=\"serializedNode.visible\">\n                <ng-container *ngTemplateOutlet=\"template; context: { $implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns }\"></ng-container>\n            </ng-container>\n        </ng-template>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: { $implicit: columns, frozen: frozen }\"></ng-container>\n        </ng-container>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { columns: [{\n                type: Input,\n                args: ['pTreeTableBody']\n            }], template: [{\n                type: Input,\n                args: ['pTreeTableBodyTemplate']\n            }], frozen: [{\n                type: Input\n            }], serializedNodes: [{\n                type: Input\n            }], scrollerOptions: [{\n                type: Input\n            }] } });\nclass TTScrollableView {\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    get scrollHeight() {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val) {\n        this._scrollHeight = val;\n        if (val != null && (val.includes('%') || val.includes('calc'))) {\n            console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.');\n        }\n    }\n    ngAfterViewInit() {\n        if (!this.frozen) {\n            if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'p-treetable-unfrozen-view');\n            }\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                if (this.tt.virtualScroll)\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-scroller-viewport');\n                else\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\n            }\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n            this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n            }\n        }\n        else {\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n            }\n        }\n        this.bindEvents();\n    }\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\n                this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n            }\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                this.footerScrollListener = this.onFooterScroll.bind(this);\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n            }\n            if (!this.frozen) {\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\n                if (this.tt.virtualScroll)\n                    this.scroller.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);\n                else\n                    this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n            }\n        });\n    }\n    unbindEvents() {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n        if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n        if (this.scroller && this.scroller.getElementRef()) {\n            this.scroller.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n    }\n    onHeaderScroll() {\n        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n        this.preventBodyScrollPropagation = true;\n    }\n    onFooterScroll() {\n        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n        this.preventBodyScrollPropagation = true;\n    }\n    onBodyScroll(event) {\n        if (this.preventBodyScrollPropagation) {\n            this.preventBodyScrollPropagation = false;\n            return;\n        }\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n        }\n    }\n    scrollToVirtualIndex(index) {\n        if (this.scroller) {\n            this.scroller.scrollToIndex(index);\n        }\n    }\n    scrollTo(options) {\n        if (this.scroller) {\n            this.scroller.scrollTo(options);\n        }\n        else {\n            if (this.scrollBodyViewChild.nativeElement.scrollTo) {\n                this.scrollBodyViewChild.nativeElement.scrollTo(options);\n            }\n            else {\n                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n        this.frozenSiblingBody = null;\n    }\n}\nTTScrollableView.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTScrollableView, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nTTScrollableView.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.1.0\", type: TTScrollableView, selector: \"[ttScrollableView]\", inputs: { columns: [\"ttScrollableView\", \"columns\"], frozen: \"frozen\", scrollHeight: \"scrollHeight\" }, host: { classAttribute: \"p-element\" }, viewQueries: [{ propertyName: \"scrollHeaderViewChild\", first: true, predicate: [\"scrollHeader\"], descendants: true }, { propertyName: \"scrollHeaderBoxViewChild\", first: true, predicate: [\"scrollHeaderBox\"], descendants: true }, { propertyName: \"scrollBodyViewChild\", first: true, predicate: [\"scrollBody\"], descendants: true }, { propertyName: \"scrollTableViewChild\", first: true, predicate: [\"scrollTable\"], descendants: true }, { propertyName: \"scrollLoadingTableViewChild\", first: true, predicate: [\"loadingTable\"], descendants: true }, { propertyName: \"scrollFooterViewChild\", first: true, predicate: [\"scrollFooter\"], descendants: true }, { propertyName: \"scrollFooterBoxViewChild\", first: true, predicate: [\"scrollFooterBox\"], descendants: true }, { propertyName: \"scrollableAlignerViewChild\", first: true, predicate: [\"scrollableAligner\"], descendants: true }, { propertyName: \"scroller\", first: true, predicate: [\"scroller\"], descendants: true }], ngImport: i0, template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate || tt.headerTemplate : tt.headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n\n        <p-scroller\n            *ngIf=\"tt.virtualScroll\"\n            #scroller\n            [items]=\"tt.serializedValue\"\n            styleClass=\"p-treetable-scrollable-body\"\n            [style]=\"{ height: tt.scrollHeight !== 'flex' ? tt.scrollHeight : undefined }\"\n            [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\n            [itemSize]=\"tt.virtualScrollItemSize || tt._virtualRowHeight\"\n            [lazy]=\"tt.lazy\"\n            (onLazyLoad)=\"tt.onLazyItemLoad($event)\"\n            [options]=\"tt.virtualScrollOptions\"\n        >\n            <ng-template pTemplate=\"content\" let-items let-scrollerOptions=\"options\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: items, options: scrollerOptions }\"></ng-container>\n            </ng-template>\n            <ng-container *ngIf=\"loaderTemplate\">\n                <ng-template pTemplate=\"loader\" let-scrollerOptions=\"options\">\n                    <ng-container *ngTemplateOutlet=\"loaderTemplate; context: { options: scrollerOptions }\"></ng-container>\n                </ng-template>\n            </ng-container>\n        </p-scroller>\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{ 'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined }\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: serializedValue, options: {} }\"></ng-container>\n            </div>\n        </ng-container>\n\n        <ng-template #buildInItems let-items let-scrollerOptions=\"options\">\n            <table #scrollTable [class]=\"tt.tableStyleClass\" [ngClass]=\"scrollerOptions.contentStyleClass\" [ngStyle]=\"tt.tableStyle\" [style]=\"scrollerOptions.contentStyle\">\n                <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate || tt.bodyTemplate : tt.bodyTemplate\" [serializedNodes]=\"items\" [frozen]=\"frozen\"></tbody>\n            </table>\n            <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n        </ng-template>\n\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate || tt.footerTemplate : tt.footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"directive\", type: i1.PrimeTemplate, selector: \"[pTemplate]\", inputs: [\"type\", \"pTemplate\"] }, { kind: \"component\", type: i4.Scroller, selector: \"p-scroller\", inputs: [\"id\", \"style\", \"styleClass\", \"tabindex\", \"items\", \"itemSize\", \"scrollHeight\", \"scrollWidth\", \"orientation\", \"step\", \"delay\", \"resizeDelay\", \"appendOnly\", \"inline\", \"lazy\", \"disabled\", \"loaderDisabled\", \"columns\", \"showSpacer\", \"showLoader\", \"numToleratedItems\", \"loading\", \"autoSize\", \"trackBy\", \"options\"], outputs: [\"onLazyLoad\", \"onScroll\", \"onScrollIndexChange\"] }, { kind: \"component\", type: TTBody, selector: \"[pTreeTableBody]\", inputs: [\"pTreeTableBody\", \"pTreeTableBodyTemplate\", \"frozen\", \"serializedNodes\", \"scrollerOptions\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTScrollableView, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ttScrollableView]',\n                    template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate || tt.headerTemplate : tt.headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n\n        <p-scroller\n            *ngIf=\"tt.virtualScroll\"\n            #scroller\n            [items]=\"tt.serializedValue\"\n            styleClass=\"p-treetable-scrollable-body\"\n            [style]=\"{ height: tt.scrollHeight !== 'flex' ? tt.scrollHeight : undefined }\"\n            [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\n            [itemSize]=\"tt.virtualScrollItemSize || tt._virtualRowHeight\"\n            [lazy]=\"tt.lazy\"\n            (onLazyLoad)=\"tt.onLazyItemLoad($event)\"\n            [options]=\"tt.virtualScrollOptions\"\n        >\n            <ng-template pTemplate=\"content\" let-items let-scrollerOptions=\"options\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: items, options: scrollerOptions }\"></ng-container>\n            </ng-template>\n            <ng-container *ngIf=\"loaderTemplate\">\n                <ng-template pTemplate=\"loader\" let-scrollerOptions=\"options\">\n                    <ng-container *ngTemplateOutlet=\"loaderTemplate; context: { options: scrollerOptions }\"></ng-container>\n                </ng-template>\n            </ng-container>\n        </p-scroller>\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{ 'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined }\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: serializedValue, options: {} }\"></ng-container>\n            </div>\n        </ng-container>\n\n        <ng-template #buildInItems let-items let-scrollerOptions=\"options\">\n            <table #scrollTable [class]=\"tt.tableStyleClass\" [ngClass]=\"scrollerOptions.contentStyleClass\" [ngStyle]=\"tt.tableStyle\" [style]=\"scrollerOptions.contentStyle\">\n                <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate || tt.bodyTemplate : tt.bodyTemplate\" [serializedNodes]=\"items\" [frozen]=\"frozen\"></tbody>\n            </table>\n            <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n        </ng-template>\n\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate || tt.footerTemplate : tt.footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { columns: [{\n                type: Input,\n                args: ['ttScrollableView']\n            }], frozen: [{\n                type: Input\n            }], scrollHeaderViewChild: [{\n                type: ViewChild,\n                args: ['scrollHeader']\n            }], scrollHeaderBoxViewChild: [{\n                type: ViewChild,\n                args: ['scrollHeaderBox']\n            }], scrollBodyViewChild: [{\n                type: ViewChild,\n                args: ['scrollBody']\n            }], scrollTableViewChild: [{\n                type: ViewChild,\n                args: ['scrollTable']\n            }], scrollLoadingTableViewChild: [{\n                type: ViewChild,\n                args: ['loadingTable']\n            }], scrollFooterViewChild: [{\n                type: ViewChild,\n                args: ['scrollFooter']\n            }], scrollFooterBoxViewChild: [{\n                type: ViewChild,\n                args: ['scrollFooterBox']\n            }], scrollableAlignerViewChild: [{\n                type: ViewChild,\n                args: ['scrollableAligner']\n            }], scroller: [{\n                type: ViewChild,\n                args: ['scroller']\n            }], scrollHeight: [{\n                type: Input\n            }] } });\nclass TTSortableColumn {\n    constructor(tt) {\n        this.tt = tt;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.sortSource$.subscribe((sortMeta) => {\n                this.updateSortState();\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n    updateSortState() {\n        this.sorted = this.tt.isSorted(this.field);\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.tt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n            DomHandler.clearSelection();\n        }\n    }\n    onEnterKey(event) {\n        this.onClick(event);\n    }\n    isEnabled() {\n        return this.ttSortableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTSortableColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTSortableColumn, deps: [{ token: TreeTable }], target: i0.ɵɵFactoryTarget.Directive });\nTTSortableColumn.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.1.0\", type: TTSortableColumn, selector: \"[ttSortableColumn]\", inputs: { field: [\"ttSortableColumn\", \"field\"], ttSortableColumnDisabled: \"ttSortableColumnDisabled\" }, host: { listeners: { \"click\": \"onClick($event)\", \"keydown.enter\": \"onEnterKey($event)\" }, properties: { \"class.p-sortable-column\": \"isEnabled()\", \"class.p-highlight\": \"sorted\", \"attr.tabindex\": \"isEnabled() ? \\\"0\\\" : null\", \"attr.role\": \"\\\"columnheader\\\"\" }, classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTSortableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttSortableColumn]',\n                    host: {\n                        class: 'p-element',\n                        '[class.p-sortable-column]': 'isEnabled()',\n                        '[class.p-highlight]': 'sorted',\n                        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n                        '[attr.role]': '\"columnheader\"'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }]; }, propDecorators: { field: [{\n                type: Input,\n                args: ['ttSortableColumn']\n            }], ttSortableColumnDisabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onEnterKey: [{\n                type: HostListener,\n                args: ['keydown.enter', ['$event']]\n            }] } });\nclass TTSortIcon {\n    constructor(tt, cd) {\n        this.tt = tt;\n        this.cd = cd;\n        this.subscription = this.tt.tableService.sortSource$.subscribe((sortMeta) => {\n            this.updateSortState();\n            this.cd.markForCheck();\n        });\n    }\n    ngOnInit() {\n        this.updateSortState();\n    }\n    onClick(event) {\n        event.preventDefault();\n    }\n    updateSortState() {\n        if (this.tt.sortMode === 'single') {\n            this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n        }\n        else if (this.tt.sortMode === 'multiple') {\n            let sortMeta = this.tt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order : 0;\n        }\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTSortIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTSortIcon, deps: [{ token: TreeTable }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTTSortIcon.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.1.0\", type: TTSortIcon, selector: \"p-treeTableSortIcon\", inputs: { field: \"field\", ariaLabelDesc: \"ariaLabelDesc\", ariaLabelAsc: \"ariaLabelAsc\" }, host: { classAttribute: \"p-element\" }, ngImport: i0, template: ` <i class=\"p-sortable-column-icon pi pi-fw\" [ngClass]=\"{ 'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0 }\"></i> `, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTSortIcon, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableSortIcon',\n                    template: ` <i class=\"p-sortable-column-icon pi pi-fw\" [ngClass]=\"{ 'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0 }\"></i> `,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { field: [{\n                type: Input\n            }], ariaLabelDesc: [{\n                type: Input\n            }], ariaLabelAsc: [{\n                type: Input\n            }] } });\nclass TTResizableColumn {\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'p-column-resizer';\n            this.el.nativeElement.appendChild(this.resizer);\n            this.zone.runOutsideAngular(() => {\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n            });\n        }\n    }\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n            document.addEventListener('mouseup', this.documentMouseUpListener);\n        });\n    }\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    }\n    onMouseDown(event) {\n        this.tt.onColumnResizeBegin(event);\n        this.bindDocumentEvents();\n    }\n    onDocumentMouseMove(event) {\n        this.tt.onColumnResize(event);\n    }\n    onDocumentMouseUp(event) {\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n    isEnabled() {\n        return this.ttResizableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n        this.unbindDocumentEvents();\n    }\n}\nTTResizableColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTResizableColumn, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nTTResizableColumn.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.1.0\", type: TTResizableColumn, selector: \"[ttResizableColumn]\", inputs: { ttResizableColumnDisabled: \"ttResizableColumnDisabled\" }, host: { classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTResizableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttResizableColumn]',\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { ttResizableColumnDisabled: [{\n                type: Input\n            }] } });\nclass TTReorderableColumn {\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n            this.dragOverListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n            this.dragEnterListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n    onDragStart(event) {\n        this.tt.onColumnDragStart(event, this.el.nativeElement);\n    }\n    onDragOver(event) {\n        event.preventDefault();\n    }\n    onDragEnter(event) {\n        this.tt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n    onDragLeave(event) {\n        this.tt.onColumnDragLeave(event);\n    }\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.tt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n    isEnabled() {\n        return this.ttReorderableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n}\nTTReorderableColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTReorderableColumn, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nTTReorderableColumn.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.1.0\", type: TTReorderableColumn, selector: \"[ttReorderableColumn]\", inputs: { ttReorderableColumnDisabled: \"ttReorderableColumnDisabled\" }, host: { listeners: { \"drop\": \"onDrop($event)\" }, classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTReorderableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttReorderableColumn]',\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { ttReorderableColumnDisabled: [{\n                type: Input\n            }], onDrop: [{\n                type: HostListener,\n                args: ['drop', ['$event']]\n            }] } });\nclass TTSelectableRow {\n    constructor(tt, tableService) {\n        this.tt = tt;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n    onEnterKey(event) {\n        if (event.which === 13) {\n            this.onClick(event);\n        }\n    }\n    onTouchEnd(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowTouchEnd(event);\n        }\n    }\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTSelectableRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTSelectableRow, deps: [{ token: TreeTable }, { token: TreeTableService }], target: i0.ɵɵFactoryTarget.Directive });\nTTSelectableRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.1.0\", type: TTSelectableRow, selector: \"[ttSelectableRow]\", inputs: { rowNode: [\"ttSelectableRow\", \"rowNode\"], ttSelectableRowDisabled: \"ttSelectableRowDisabled\" }, host: { listeners: { \"click\": \"onClick($event)\", \"keydown\": \"onEnterKey($event)\", \"touchend\": \"onTouchEnd($event)\" }, properties: { \"class.p-highlight\": \"selected\" }, classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTSelectableRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttSelectableRow]',\n                    host: {\n                        class: 'p-element',\n                        '[class.p-highlight]': 'selected'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }]; }, propDecorators: { rowNode: [{\n                type: Input,\n                args: ['ttSelectableRow']\n            }], ttSelectableRowDisabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onEnterKey: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }], onTouchEnd: [{\n                type: HostListener,\n                args: ['touchend', ['$event']]\n            }] } });\nclass TTSelectableRowDblClick {\n    constructor(tt, tableService) {\n        this.tt = tt;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTSelectableRowDblClick.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTSelectableRowDblClick, deps: [{ token: TreeTable }, { token: TreeTableService }], target: i0.ɵɵFactoryTarget.Directive });\nTTSelectableRowDblClick.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.1.0\", type: TTSelectableRowDblClick, selector: \"[ttSelectableRowDblClick]\", inputs: { rowNode: [\"ttSelectableRowDblClick\", \"rowNode\"], ttSelectableRowDisabled: \"ttSelectableRowDisabled\" }, host: { listeners: { \"dblclick\": \"onClick($event)\" }, properties: { \"class.p-highlight\": \"selected\" }, classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTSelectableRowDblClick, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttSelectableRowDblClick]',\n                    host: {\n                        class: 'p-element',\n                        '[class.p-highlight]': 'selected'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }]; }, propDecorators: { rowNode: [{\n                type: Input,\n                args: ['ttSelectableRowDblClick']\n            }], ttSelectableRowDisabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['dblclick', ['$event']]\n            }] } });\nclass TTContextMenuRow {\n    constructor(tt, tableService, el) {\n        this.tt = tt;\n        this.tableService = tableService;\n        this.el = el;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.contextMenuSource$.subscribe((node) => {\n                this.selected = this.tt.equals(this.rowNode.node, node);\n            });\n        }\n    }\n    onContextMenu(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowRightClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n            this.el.nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n    isEnabled() {\n        return this.ttContextMenuRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTContextMenuRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTContextMenuRow, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nTTContextMenuRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.1.0\", type: TTContextMenuRow, selector: \"[ttContextMenuRow]\", inputs: { rowNode: [\"ttContextMenuRow\", \"rowNode\"], ttContextMenuRowDisabled: \"ttContextMenuRowDisabled\" }, host: { listeners: { \"contextmenu\": \"onContextMenu($event)\" }, properties: { \"class.p-highlight-contextmenu\": \"selected\", \"attr.tabindex\": \"isEnabled() ? 0 : undefined\" }, classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTContextMenuRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttContextMenuRow]',\n                    host: {\n                        class: 'p-element',\n                        '[class.p-highlight-contextmenu]': 'selected',\n                        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ElementRef }]; }, propDecorators: { rowNode: [{\n                type: Input,\n                args: ['ttContextMenuRow']\n            }], ttContextMenuRowDisabled: [{\n                type: Input\n            }], onContextMenu: [{\n                type: HostListener,\n                args: ['contextmenu', ['$event']]\n            }] } });\nclass TTCheckbox {\n    constructor(tt, tableService, cd) {\n        this.tt = tt;\n        this.tableService = tableService;\n        this.cd = cd;\n        this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.tt.isSelected(this.rowNode.node);\n            this.cd.markForCheck();\n        });\n    }\n    ngOnInit() {\n        this.checked = this.tt.isSelected(this.rowNode.node);\n    }\n    onClick(event) {\n        if (!this.disabled) {\n            this.tt.toggleNodeWithCheckbox({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n        DomHandler.clearSelection();\n    }\n    onFocus() {\n        this.focused = true;\n    }\n    onBlur() {\n        this.focused = false;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTCheckbox, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTTCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.1.0\", type: TTCheckbox, selector: \"p-treeTableCheckbox\", inputs: { disabled: \"disabled\", rowNode: [\"value\", \"rowNode\"] }, host: { classAttribute: \"p-element\" }, ngImport: i0, template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused }\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-indeterminate': rowNode.node.partialSelected, 'p-disabled': disabled }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon pi\" [ngClass]=\"{ 'pi-check': checked, 'pi-minus': rowNode.node.partialSelected }\"></span>\n            </div>\n        </div>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTCheckbox, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableCheckbox',\n                    template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused }\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-indeterminate': rowNode.node.partialSelected, 'p-disabled': disabled }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon pi\" [ngClass]=\"{ 'pi-check': checked, 'pi-minus': rowNode.node.partialSelected }\"></span>\n            </div>\n        </div>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { disabled: [{\n                type: Input\n            }], rowNode: [{\n                type: Input,\n                args: ['value']\n            }] } });\nclass TTHeaderCheckbox {\n    constructor(tt, tableService, cd) {\n        this.tt = tt;\n        this.tableService = tableService;\n        this.cd = cd;\n        this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n        this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n    onClick(event, checked) {\n        if (this.tt.value && this.tt.value.length > 0) {\n            this.tt.toggleNodesWithCheckbox(event, !checked);\n        }\n        DomHandler.clearSelection();\n    }\n    onFocus() {\n        this.focused = true;\n    }\n    onBlur() {\n        this.focused = false;\n    }\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n    updateCheckedState() {\n        this.cd.markForCheck();\n        let checked;\n        const data = this.tt.filteredNodes || this.tt.value;\n        if (data) {\n            for (let node of data) {\n                if (this.tt.isSelected(node)) {\n                    checked = true;\n                }\n                else {\n                    checked = false;\n                    break;\n                }\n            }\n        }\n        else {\n            checked = false;\n        }\n        return checked;\n    }\n}\nTTHeaderCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTHeaderCheckbox, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTTHeaderCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.1.0\", type: TTHeaderCheckbox, selector: \"p-treeTableHeaderCheckbox\", host: { classAttribute: \"p-element\" }, viewQueries: [{ propertyName: \"boxViewChild\", first: true, predicate: [\"box\"], descendants: true }], ngImport: i0, template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused }\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value || tt.value.length === 0\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-disabled': !tt.value || tt.value.length === 0 }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{ 'pi pi-check': checked }\"></span>\n            </div>\n        </div>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTHeaderCheckbox, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableHeaderCheckbox',\n                    template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused }\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value || tt.value.length === 0\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-disabled': !tt.value || tt.value.length === 0 }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{ 'pi pi-check': checked }\"></span>\n            </div>\n        </div>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { boxViewChild: [{\n                type: ViewChild,\n                args: ['box']\n            }] } });\nclass TTEditableColumn {\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.tt.editingCellClick = true;\n            if (this.tt.editingCell) {\n                if (this.tt.editingCell !== this.el.nativeElement) {\n                    if (!this.tt.isEditingCellValid()) {\n                        return;\n                    }\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n    openCell() {\n        this.tt.updateEditingCell(this.el.nativeElement, this.data, this.field);\n        DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n        this.tt.onEditInit.emit({ field: this.field, data: this.data });\n        this.tt.editingCellClick = true;\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n                if (focusable) {\n                    focusable.focus();\n                }\n            }, 50);\n        });\n    }\n    closeEditingCell() {\n        DomHandler.removeClass(this.tt.editingCell, 'p-checkbox-icon');\n        this.tt.editingCell = null;\n        this.tt.unbindDocumentEditListener();\n    }\n    onKeyDown(event) {\n        if (this.isEnabled()) {\n            //enter\n            if (event.keyCode == 13) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.closeEditingCell();\n                    this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                }\n                event.preventDefault();\n            }\n            //escape\n            else if (event.keyCode == 27) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.closeEditingCell();\n                    this.tt.onEditCancel.emit({ field: this.field, data: this.data });\n                }\n                event.preventDefault();\n            }\n            //tab\n            else if (event.keyCode == 9) {\n                this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                if (event.shiftKey)\n                    this.moveToPreviousCell(event);\n                else\n                    this.moveToNextCell(event);\n            }\n        }\n    }\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n                cell = cell.parentElement;\n            }\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n    moveToPreviousCell(event) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findPreviousEditableColumn(currentCell);\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n    moveToNextCell(event) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findNextEditableColumn(currentCell);\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n    findPreviousEditableColumn(cell) {\n        let prevCell = cell.previousElementSibling;\n        if (!prevCell) {\n            let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'p-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n    findNextEditableColumn(cell) {\n        let nextCell = cell.nextElementSibling;\n        if (!nextCell) {\n            let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'p-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n    isEnabled() {\n        return this.ttEditableColumnDisabled !== true;\n    }\n}\nTTEditableColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTEditableColumn, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nTTEditableColumn.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.1.0\", type: TTEditableColumn, selector: \"[ttEditableColumn]\", inputs: { data: [\"ttEditableColumn\", \"data\"], field: [\"ttEditableColumnField\", \"field\"], ttEditableColumnDisabled: \"ttEditableColumnDisabled\" }, host: { listeners: { \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\" }, classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTEditableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttEditableColumn]',\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { data: [{\n                type: Input,\n                args: ['ttEditableColumn']\n            }], field: [{\n                type: Input,\n                args: ['ttEditableColumnField']\n            }], ttEditableColumnDisabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\nclass TreeTableCellEditor {\n    constructor(tt, editableColumn) {\n        this.tt = tt;\n        this.editableColumn = editableColumn;\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n}\nTreeTableCellEditor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TreeTableCellEditor, deps: [{ token: TreeTable }, { token: TTEditableColumn }], target: i0.ɵɵFactoryTarget.Component });\nTreeTableCellEditor.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.1.0\", type: TreeTableCellEditor, selector: \"p-treeTableCellEditor\", host: { classAttribute: \"p-element\" }, queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], ngImport: i0, template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TreeTableCellEditor, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableCellEditor',\n                    template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TTEditableColumn }]; }, propDecorators: { templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }] } });\nclass TTRow {\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    onKeyDown(event) {\n        switch (event.which) {\n            //down arrow\n            case 40:\n                let nextRow = this.el.nativeElement.nextElementSibling;\n                if (nextRow) {\n                    nextRow.focus();\n                }\n                event.preventDefault();\n                break;\n            //down arrow\n            case 38:\n                let prevRow = this.el.nativeElement.previousElementSibling;\n                if (prevRow) {\n                    prevRow.focus();\n                }\n                event.preventDefault();\n                break;\n            //left arrow\n            case 37:\n                if (this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = false;\n                    this.tt.onNodeCollapse.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n                break;\n            //right arrow\n            case 39:\n                if (!this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = true;\n                    this.tt.onNodeExpand.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n                break;\n        }\n    }\n    restoreFocus() {\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let row = DomHandler.findSingle(this.tt.containerViewChild.nativeElement, '.p-treetable-tbody').children[this.tt.toggleRowIndex];\n                if (row) {\n                    row.focus();\n                }\n            }, 25);\n        });\n    }\n}\nTTRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTRow, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nTTRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.1.0\", type: TTRow, selector: \"[ttRow]\", inputs: { rowNode: [\"ttRow\", \"rowNode\"] }, host: { listeners: { \"keydown\": \"onKeyDown($event)\" }, properties: { \"attr.tabindex\": \"\\\"0\\\"\" }, classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TTRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttRow]',\n                    host: {\n                        class: 'p-element',\n                        '[attr.tabindex]': '\"0\"'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { rowNode: [{\n                type: Input,\n                args: ['ttRow']\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\nclass TreeTableToggler {\n    constructor(tt) {\n        this.tt = tt;\n    }\n    onClick(event) {\n        this.rowNode.node.expanded = !this.rowNode.node.expanded;\n        if (this.rowNode.node.expanded) {\n            this.tt.onNodeExpand.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        else {\n            this.tt.onNodeCollapse.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        this.tt.updateSerializedValue();\n        this.tt.tableService.onUIUpdate(this.tt.value);\n        event.preventDefault();\n    }\n}\nTreeTableToggler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TreeTableToggler, deps: [{ token: TreeTable }], target: i0.ɵɵFactoryTarget.Component });\nTreeTableToggler.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.1.0\", type: TreeTableToggler, selector: \"p-treeTableToggler\", inputs: { rowNode: \"rowNode\" }, host: { classAttribute: \"p-element\" }, ngImport: i0, template: `\n        <button\n            type=\"button\"\n            class=\"p-treetable-toggler p-link\"\n            (click)=\"onClick($event)\"\n            tabindex=\"-1\"\n            pRipple\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\"\n            [style.marginLeft]=\"rowNode.level * 16 + 'px'\"\n        >\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\n        </button>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i5.Ripple, selector: \"[pRipple]\" }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TreeTableToggler, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableToggler',\n                    template: `\n        <button\n            type=\"button\"\n            class=\"p-treetable-toggler p-link\"\n            (click)=\"onClick($event)\"\n            tabindex=\"-1\"\n            pRipple\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\"\n            [style.marginLeft]=\"rowNode.level * 16 + 'px'\"\n        >\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\n        </button>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }]; }, propDecorators: { rowNode: [{\n                type: Input\n            }] } });\nclass TreeTableModule {\n}\nTreeTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TreeTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTreeTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.1.0\", ngImport: i0, type: TreeTableModule, declarations: [TreeTable, TreeTableToggler, TTScrollableView, TTBody, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor], imports: [CommonModule, PaginatorModule, RippleModule, ScrollerModule], exports: [TreeTable, SharedModule, TreeTableToggler, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor, ScrollerModule] });\nTreeTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TreeTableModule, imports: [CommonModule, PaginatorModule, RippleModule, ScrollerModule, SharedModule,\n        ScrollerModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: TreeTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, PaginatorModule, RippleModule, ScrollerModule],\n                    exports: [\n                        TreeTable,\n                        SharedModule,\n                        TreeTableToggler,\n                        TTSortableColumn,\n                        TTSortIcon,\n                        TTResizableColumn,\n                        TTRow,\n                        TTReorderableColumn,\n                        TTSelectableRow,\n                        TTSelectableRowDblClick,\n                        TTContextMenuRow,\n                        TTCheckbox,\n                        TTHeaderCheckbox,\n                        TTEditableColumn,\n                        TreeTableCellEditor,\n                        ScrollerModule\n                    ],\n                    declarations: [\n                        TreeTable,\n                        TreeTableToggler,\n                        TTScrollableView,\n                        TTBody,\n                        TTSortableColumn,\n                        TTSortIcon,\n                        TTResizableColumn,\n                        TTRow,\n                        TTReorderableColumn,\n                        TTSelectableRow,\n                        TTSelectableRowDblClick,\n                        TTContextMenuRow,\n                        TTCheckbox,\n                        TTHeaderCheckbox,\n                        TTEditableColumn,\n                        TreeTableCellEditor\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TTBody, TTCheckbox, TTContextMenuRow, TTEditableColumn, TTHeaderCheckbox, TTReorderableColumn, TTResizableColumn, TTRow, TTScrollableView, TTSelectableRow, TTSelectableRowDblClick, TTSortIcon, TTSortableColumn, TreeTable, TreeTableCellEditor, TreeTableModule, TreeTableService, TreeTableToggler };\n//# sourceMappingURL=primeng-treetable.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}